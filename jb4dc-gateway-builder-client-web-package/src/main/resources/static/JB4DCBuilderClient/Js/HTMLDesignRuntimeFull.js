"use strict";var FormRelationPOUtility={_FieldPOCache:null,BuildRecord:function(e,t,n,a,i,r){if(null==t||null==t)throw"方法需要提供desc参数!";if(null==n||null==n)throw"方法需要提供recordId参数!";if(null==a||null==a)throw"方法需要提供outerFieldName参数!";if(null==i||null==i)throw"方法需要提供outerFieldValue参数!";if(null==r||null==r)throw"方法需要提供selfFieldName参数!";return{recordId:n,desc:t,recordFieldPOList:e,outerFieldName:a,outerFieldValue:i,selfFieldName:r}},FindRecordFieldPOArray:function(e){return e.recordFieldPOList},Add1To1DataRecordFieldPOList:function(e,t,n,a,i,r,o){return e.oneDataRecord=this.BuildRecord(t,n,a,i,r,o),e},Add1To1DataRecord:function(e,t){return e.oneDataRecord=t,e},Get1To1DataRecord:function(e){return e.oneDataRecord},Get1To1DataRecordFieldPOArray:function(e){return e.oneDataRecord?this.FindRecordFieldPOArray(e.oneDataRecord):null},Add1ToNDataRecord:function(e,t){for(var n=0;n<t.length;n++){if(null==t[n].desc||null==t[n].desc)throw"arrayData中的数据对象需要包含desc属性!";if(null==t[n].recordId||null==t[n].recordId)throw"arrayData中的数据对象需要包含recordId属性!";if(null==t[n].recordFieldPOList||null==t[n].recordFieldPOList)throw"arrayData中的数据对象需要包含recordFieldPOList属性!";if(null==t[n].outerFieldName||null==t[n].outerFieldName)throw"arrayData中的数据对象需要包含outerFieldName属性!";if(null==t[n].outerFieldValue||null==t[n].outerFieldValue)throw"arrayData中的数据对象需要包含outerFieldValue属性!";if(null==t[n].selfFieldName||null==t[n].selfFieldName)throw"arrayData中的数据对象需要包含selfFieldName属性!"}return e.listDataRecord=t,e},Get1ToNDataRecord:function(e){return e.listDataRecord},FindFieldPOInOneDataRecordEnableNull:function(e,t){var n=this.FindRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});return a||null},FindFieldPOInOneDataRecord:function(e,t){var n=this.FindFieldPOInOneDataRecordEnableNull(e,t);if(!n)throw"FormRuntime.FindFieldPOInOneDataRecord:找不到字段"+t+"的数据值!";return n},FindFieldValueInOneDataRecord:function(e,t){var n=this.FindRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});if(a)return a.value;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIDFieldPOInOneDataRecord:function(e){return this.FindFieldPOInOneDataRecord(e,"ID")},FindFieldPOByRelationPO:function(e,t){var n=FormRelationPOUtility.Get1To1DataRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});if(a)return a;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIdFieldPOByRelationPO:function(e){return this.FindFieldPOByRelationPO(e,"ID")},FindMainRelationPO:function(e){return ArrayUtility.WhereSingle(e,function(e){return FormRelationPOUtility.IsMainRelationPO(e)})},IsMainRelationPO:function(e){return 1==e.isMain||"-1"==e.parentId},FindNotMainRelationPO:function(e){return ArrayUtility.Where(e,function(e){return 1!=e.isMain||"-1"!=e.parentId})},FindRelationPOById:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.id==t})},FindRelationPOByTableName:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.tableName==t})},FindFieldPOInRelationFormRecordComplexPoOneDataRecord:function(e,t,n,a){if(null==this._FieldPOCache){this._FieldPOCache={};for(var i=e.formRecordDataRelationPOList,r=0;r<i.length;r++){var o=i[r],l=o.id,s=this.Get1To1DataRecordFieldPOArray(o);if(s)for(var d=0;d<s.length;d++){var u=s[d],c=u.fieldName;this._FieldPOCache[l+"_"+c]=u}}}return this._FieldPOCache[t+"_"+a]},FindRelationPOInRelationFormRecordComplexPo:function(e,t){return ArrayUtility.WhereSingle(e.formRecordDataRelationPOList,function(e){return e.id==t})},FindParentFieldValueInFormDataRelationListWith1To1DataRecord:function(e,t,n,a){ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==relationPO.parentId})},CreateFieldInRecordFieldPOArray:function(e,t,n){var a=JsonUtility.CloneSimple(e[0]);a.fieldName=t,a.value=n,e.push(a)},CreateIdFieldInRecordFieldPOArray:function(e,t,n,a){if(t||(t=StringUtility.Guid()),!a)throw"FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray:tableId不能为空!";var i=ArrayUtility.WhereSingle(n.formRecordComplexPO.allDataRelationTableFieldsMap[a],function(e){return"是"==e.fieldIsPk}).fieldName;console.log(i),this.CreateFieldInRecordFieldPOArray(e,i,t)}},FormRuntimeSinglePageObject={_webFormRTParas:null,_formRuntimeInst:null,FORM_RUNTIME_CATEGORY_INDEPENDENCE:"IsIndependence",FORM_RUNTIME_CATEGORY_LIST:"IsDependenceList",getWebFormRTParasWithListButtonId:function(){return this._webFormRTParas||(this._webFormRTParas={FormId:BaseUtility.GetUrlParaValue("formId"),ButtonId:BaseUtility.GetUrlParaValue("buttonId"),OperationType:BaseUtility.GetUrlParaValue("operationType"),ListFormButtonElemId:BaseUtility.GetUrlParaValue("listFormButtonElemId"),RecordId:BaseUtility.GetUrlParaValue("recordId"),WindowWidth:BaseUtility.GetUrlParaValue("windowWidth"),WindowHeight:BaseUtility.GetUrlParaValue("windowHeight"),FormRuntimeCategory:this.FORM_RUNTIME_CATEGORY_LIST},this._webFormRTParas.RecordId||(this._webFormRTParas.RecordId=StringUtility.Guid())),this._webFormRTParas},getWebFormRTParasWithIndependence:function(){var e=RuntimeGeneralInstance.TryGetMenuOuterId();return StringUtility.IsNullOrEmpty(e)&&(e=BaseUtility.GetUrlParaValue("formId")),this._webFormRTParas||(this._webFormRTParas={FormId:e,ButtonId:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,OperationType:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,ListFormButtonElemId:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,RecordId:"",WindowWidth:"",WindowHeight:"",FormRuntimeCategory:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE},StringUtility.IsNotNullOrEmpty(BaseUtility.GetUrlParaValue("operationType"))&&(this._webFormRTParas.OperationType=BaseUtility.GetUrlParaValue("operationType")),StringUtility.IsNotNullOrEmpty(BaseUtility.GetUrlParaValue("recordId"))&&(this._webFormRTParas.RecordId=BaseUtility.GetUrlParaValue("recordId")),this._webFormRTParas.RecordId||(this._webFormRTParas.RecordId=StringUtility.Guid())),this._webFormRTParas},pageReady:function(e,t,n,a){this._formRuntimeInst=Object.create(FormRuntime);var i=n.call(this);return this._formRuntimeInst.Initialization({RendererToId:"htmlDesignRuntimeWrap",FormId:i.FormId,RecordId:i.RecordId,ButtonId:i.ButtonId,OperationType:i.OperationType,IsPreview:e,RendererChainCompletedFunc:t,ListFormButtonElemId:i.ListFormButtonElemId,WebFormRTParas:i,FormRuntimeCategory:i.FormRuntimeCategory,pageHostInstance111:a}),this._formRuntimeInst}},FormRuntime={_Prop_Config:{RendererToId:null,FormId:"",RecordId:"",ButtonId:"",IsPreview:!1,OperationType:"",ListFormButtonElemId:"",FormRuntimeCategory:"IsDependenceList",PreHandleFormHtmlRuntimeFunc:null},_$RendererToElem:null,_FormPO:null,_FormDataRelationList:null,_OriginalFormDataRelationList:null,_FormJSRuntimeInst:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl(),this._LoadToPDFStyle()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){var e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTML",{});this._Prop_Config.IsPreview&&(e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTMLForPreView",{})),RuntimeGeneralInstance.LoadHtmlDesignContent(e,this._Prop_Config.RendererTo,{formId:this._Prop_Config.FormId,recordId:this._Prop_Config.RecordId,buttonId:this._Prop_Config.ButtonId,operationType:this.GetOperationType(),formRuntimeCategory:this._Prop_Config.FormRuntimeCategory},function(e){try{this._FormPO=e.data,this._FormPO.formDataRelation="",this._FormDataRelationList=this._FormPO.formRecordDataRelationPOList,this._OriginalFormDataRelationList=JsonUtility.CloneStringify(this._FormDataRelationList);var t=e.data.formHtmlRuntime;"function"==typeof this._Prop_Config.PreHandleFormHtmlRuntimeFunc&&(t=this._Prop_Config.PreHandleFormHtmlRuntimeFunc(t,this,this._Prop_Config)),this._$RendererToElem.append(t);try{this._FormJSRuntimeInst=Object.create(HTMLJSRuntime),this._FormJSRuntimeInst.Initialization({},this._$RendererToElem,this._FormPO.formJsContent)}catch(e){throw"加载动态脚本错误! FormRuntime._LoadHTMLToEl--\x3ethis._FormJSRuntimeInst.Initialization:"+e}var n={po:e.data,sourceHTML:t,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this};VirtualBodyControl.RendererChain(n);try{VirtualBodyControl.InitStyle(n)}catch(e){throw"初始化样式错误! FormRuntime._LoadHTMLToEl--\x3eVirtualBodyControl.InitStyle:"+e}if(this.IsPreview()?this.CallRendererChainCompletedFunc():this._FormPO.listButtonEntity&&this.CreateALLInnerFormButton(this._FormPO.listButtonEntity),BaseUtility.IsUpdateOperation(this.GetOperationType())||BaseUtility.IsViewOperation(this.GetOperationType())){var a=e.data.formRecordComplexPO;this.DeSerializationFormData(a)}BaseUtility.IsViewOperation(this.GetOperationType())&&this._Prop_Config.FormRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_INDEPENDENCE?$("#innerButtonWrapOuter").hide():this.IsPrint()&&($("#innerButtonWrapOuter").hide(),$(".html-design-operation-button-outer-wrap").hide()),this.CallRendererChainCompletedFunc(),console.log("222222222222222222222222")}catch(e){throw"渲染Html控件错误! FormRuntime._LoadHTMLToEl:"+e}},this)},_LoadToPDFStyle:function(){"ToPDF"==BaseUtility.GetUrlParaValue("ToPDF")&&(LoadJsCssUtility("/JB4DCBuilderClient/Themes/Default/Css/HTMLDesignRuntimeToPDF.css"),console.log("加载转PDF样式!"))},CallRendererChainCompletedFunc:function(){"function"==typeof this._Prop_Config.RendererChainCompletedFunc&&this._Prop_Config.RendererChainCompletedFunc.call(this,this._Prop_Config),HTMLPageObjectInstanceProxy.Init(this._Prop_Config,this._FormPO),window.setTimeout(function(){HTMLPageObjectInstanceProxy.CallPageReady(),DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},500)},IsPrint:function(){return"true"==BaseUtility.GetUrlParaValue("IsPrint")},IsPreview:function(){return this._Prop_Config.IsPreview},GetRecordId:function(){return this._Prop_Config.RecordId},GetOperationType:function(){return this._Prop_Config.OperationType},GetOpenedListFormButtonId:function(){return this._Prop_Config.ListFormButtonElemId},GetOriginalFormDataRelation:function(){return JsonUtility.CloneStringify(this._OriginalFormDataRelationList)},GetFormPO:function(){return this._FormPO},SerializationFormData:function(){for(var e={recordId:this._Prop_Config.RecordId,formId:this._Prop_Config.FormId,buttonId:this._Prop_Config.ButtonId,formRuntimeCategory:this._Prop_Config.FormRuntimeCategory,formRecordDataRelationPOList:null,exData:null},t=this.GetOriginalFormDataRelation(),n=0;n<t.length;n++){var a=t[n],i=a.singleName,r=a.tableName,o=a.tableId,l=a.main;(a.isMain=l)&&(a.relationType="1To1");var s=a.relationType;if("1To1"==s){for(var d=$("[tablename='"+r+"'][serialize='true']").not($("[control_category='DynamicContainer']").find("[jbuild4dc_custom='true']")),u=[],c=0;c<d.length;c++){var f=$(d[c]),h=HTMLControl.TryGetFieldTransferPO(f,a.id,i,s);u.push(h)}var p="",m="",T="",g="";g=l?(FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(u,e.recordId,this.GetFormPO(),o),p=e.recordId,T=m="NotOuterField"):(p=FormRelationPOUtility.FindFieldPOInOneDataRecord(u,a.pkFieldName).value,m=a.outerKeyFieldName,T=a.outerKeyFieldName,a.selfKeyFieldName),FormRelationPOUtility.Add1To1DataRecordFieldPOList(a,u,"",p,m,T,g)}else{var _=$("[serialize='true'][control_category='DynamicContainer'][relation_po_id='"+a.id+"']");if(0<_.length)HTMLControl.GetControlInstanceByElem(_).SerializationValue(t,a,_)}}return e.formRecordDataRelationPOList=t,e},DeSerializationFormData:function(e){VirtualBodyControl.RendererDataChain({$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this,relationFormRecordComplexPo:e,callToViewStatusFunc:BaseUtility.IsViewOperation(this.GetOperationType())})},CreateALLInnerFormButton:function(e){if(!StringUtility.IsNullOrEmpty(e.buttonInnerConfig))for(var t=JsonUtility.StringToJson(e.buttonInnerConfig),n=0;n<t.length;n++){var a=t[n],i=InnerFormButtonRuntime.RendererSingleInnerFormButton(a,this,e);$("#innerButtonWrapOuter").append(i)}},GetWebFormRTParas:function(){return this._Prop_Config.WebFormRTParas}},FormRuntimeMockDataPool={mockDataPool:{},SaveData:function(e,t,n){var a=e+"-"+t;this.mockDataPool[a]=n},GetData:function(e,t){var n=e+"-"+t;return this.mockDataPool[n]?this.mockDataPool[n]:null},SaveDataToParentPool:function(e,t,n){window.parent.FormRuntimeMockDataPool.SaveData(e,t,n)},GetDataFromParentPool:function(e,t){return window.parent.FormRuntimeMockDataPool.GetData(e,t)},GetMockData:function(){return{recordId:"",formId:"34db0d6f-7978-4acf-8a45-13a6ee5f63e2",buttonId:"",formRecordDataRelationPOList:[{id:"d9bc9332-3c94-28bb-1c11-049764c69eb5",parentId:"-1",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1To1",isSave:"true",condition:"",tableId:"TDEV_TEST_1",tableName:"TDEV_TEST_1",tableCaption:"开发测试表11",tableCode:"T_10437",displayText:"TDEV_TEST_1[开发测试表1]",icon:"/Themes/Png16X16/table.png",isMain:!0,oneDataRecord:{desc:"一对一数据",recordFieldPOList:[{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"测试15",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_375186891",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-31",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_DropDownSelect",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_STATUS",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"sel_246410688",defaultType:"",defaultValue:"",value:"4",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_ORGAN_ID",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"txt_897909755",defaultType:"EnvVar",defaultValue:"ENV_SYSTEM_CURRENT_USER_ORGAN_ID",value:"10001",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"0d561c0e-b83b-a9ff-c88a-652d4a4aa256",success:!0,msg:""}]}},{id:"2d7def75-1438-7614-af7d-60ce0650eba6",parentId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1ToN",isSave:"true",condition:"",tableId:"TDEV_TEST_2",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableCode:"T_10438",displayText:"TDEV_TEST_2[开发测试表2](1ToN)",icon:"/Themes/Png16X16/table.png",isMain:!1,listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}]},{id:"4313366b-caa0-4272-2690-1237750651f6",parentId:"2d7def75-1438-7614-af7d-60ce0650eba6",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"TDEV_TEST_2_ID",outerKeyFieldName:"ID",relationType:"1ToN",isSave:"true",condition:"",tableId:"e15549cb-e074-48a3-8939-44340e387f17",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableCode:"T_10871",displayText:"TDEV_TEST_5[TDEV_TEST_5](1ToN)",icon:"/Themes/Png16X16/table.png",listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8be67086-3f2e-9eb7-7b9d-f5350db9de92",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"11",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3a4f512f-5fd5-2d8f-98a0-6e8aa0178999",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"85be9cb5-48bc-ec01-6f0c-7a634934f25e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8bd9b70b-7a03-5cbd-863f-bf994612647b",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dbf46b13-3285-5891-ac50-ed783b8fbcda",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"22",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dfeeeadc-3418-89b8-2fc3-98f9263900c4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"005d1265-f165-34f9-dfc7-1e700ba7ffa4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"058e8563-adc1-7c3d-417f-783fe19dd936",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"82842a88-279e-4599-0f57-0b94c65b5a4c",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"33",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"c2b3b86b-d6c3-cb4b-b215-6db99152b56e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"b06fc984-4548-0914-b041-e8c982151b86",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1a648882-ce4b-af88-5471-8846962414aa",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}],isMain:!1}],exData:null}}},HTMLJSRuntime={_Prop_Config:{},_$RendererToElem:null,_JsContent:null,_ReplaceContextPath:function(e){try{var t=BaseUtility.GetRootPath();return e.replace(/\$\{contextPath\}/g,t)}catch(e){throw"_ReplaceContextPath:"+e}},_ReplaceTimeStamp:function(e){try{var t=(new Date).getTime();return e.replace(/\$\{timeStamp\}/g,t)}catch(e){throw"_ReplaceTimeStamp:"+e}},ReplaceJSParas:function(e){try{var t=this._ReplaceContextPath(e);return t=this._ReplaceTimeStamp(t)}catch(e){throw"ReplaceJSParas:"+e}},Initialization:function(e,t,n){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=t,this._JsContent=n,this._LoadJSToEl()},_LoadJSToEl:function(){this._$RendererToElem.append(this.ReplaceJSParas(this._JsContent))}},HTMLPageObjectInstanceProxy={webFormRTParas:null,htmlPO:null,formRecordComplexPO:null,FormPageObjectInstance:null,BuilderListPageRuntimeInstance:null,Init:function(e,t){this.webFormRTParas=e,this.htmlPO=t,this.htmlPO.formRecordComplexPO&&(this.formRecordComplexPO=this.htmlPO.formRecordComplexPO)},CallPageReady:function(){"undefined"!=typeof FormPageObjectInstance&&(this.FormPageObjectInstance=FormPageObjectInstance),this.FormPageObjectInstance&&(this.FormPageObjectInstance.data.webFormRTParas=this.webFormRTParas,this.FormPageObjectInstance.data.formPO=this.htmlPO,this.FormPageObjectInstance.data.formRecordComplexPO=this.formRecordComplexPO,this.FormPageObjectInstance.pageReady&&this.FormPageObjectInstance.pageReady(),this.FormPageObjectInstance.bindRecordDataReady&&this.FormPageObjectInstance.bindRecordDataReady()),"undefined"!=typeof BuilderListPageRuntimeInstance&&(this.BuilderListPageRuntimeInstance=BuilderListPageRuntimeInstance),this.BuilderListPageRuntimeInstance&&(this.BuilderListPageRuntimeInstance.data||(this.BuilderListPageRuntimeInstance.data={}),this.BuilderListPageRuntimeInstance.data.listPO=this.htmlPO,this.BuilderListPageRuntimeInstance.pageReady&&this.BuilderListPageRuntimeInstance.pageReady(),this.BuilderListPageRuntimeInstance.rendererChainCompleted&&this.BuilderListPageRuntimeInstance.rendererChainCompleted(),this.BuilderListPageRuntimeInstance.rendererDataChainCompleted&&this.BuilderListPageRuntimeInstance.rendererDataChainCompleted())},CallValidateEveryFromControl:function(e){if(this.FormPageObjectInstance.validateEveryFromControl)try{var t=this.FormPageObjectInstance.validateEveryFromControl(e);t&&(e=t)}catch(e){DialogUtility.AlertText("自定义校验方法执行失败!")}return e}},InnerFormButtonRuntime={RendererSingleInnerFormButton:function(e,t,n){var a,i=t._Prop_Config.FormRuntimeCategory;if("关闭按钮"==e.buttonType)a=Object.create(InnerFormCloseButton).Instance(e,t,n,i).elem;else if("保存按钮"==e.buttonType)a=Object.create(InnerFormSaveButton).Instance(e,t,n,i).elem;else{if("脚本按钮"!=e.buttonType){var r="不支持的按钮类型:InnerFormButtonRuntime.RendererSingleInnerFormButton";throw DialogUtility.AlertText(r),r}a=Object.create(InnerFormJsClientButton).Instance(e,t,n,i).elem}return a},RendererSingleInnerFormButtonClick:function(e){}},ListRuntime={_Prop_Status:"Edit",_Prop_Config:{RendererToId:null,ListId:"",IsPreview:!1},_ListPO:null,_$RendererToElem:null,_JSRuntimeInst:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){RuntimeGeneralInstance.LoadHtmlDesignContent(BaseUtility.GetRootPath()+"/Rest/Builder/RunTime/ListRuntime/LoadHTML?listId="+this._Prop_Config.ListId,this._Prop_Config.RendererTo,{},function(e){console.log(e);var t=this;t._ListPO=e.data,this._$RendererToElem.append(e.data.listHtmlRuntime),this._JSRuntimeInst=Object.create(HTMLJSRuntime),this._JSRuntimeInst.Initialization({},this._$RendererToElem,this._ListPO.listJsContent),VirtualBodyControl.RendererChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,listRuntimeInstance:this});var n=window.setInterval(function(){t._RendererChainIsCompleted&&window.clearInterval(n)},500),a=e.data.listDatasetId;VirtualBodyControl.RendererDataChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,topDataSetId:a,listRuntimeInstance:this});var i=window.setInterval(function(){t._RendererDataChainIsCompleted&&(window.clearInterval(i),t.CallRendererChainCompletedFunc())},700)},this)},CallRendererChainCompletedFunc:function(){"function"==typeof this._Prop_Config.RendererChainCompletedFunc&&this._Prop_Config.RendererChainCompletedFunc.call(this),HTMLPageObjectInstanceProxy.Init(this._Prop_Config,this._ListPO),window.setTimeout(function(){console.log("延迟调用"),HTMLPageObjectInstanceProxy.CallPageReady()},500)},CheckPrimaryKeyInDataSet:function(e,t){if(e.list&&0<e.list.length){var n=e.list[0];for(var a in n)if(StringUtility.toUpperCase(a)==StringUtility.toUpperCase(t))return!0}return!1},GetPrimaryKey:function(){return this._ListPO.listDatasetPrimaryKey},IsPreview:function(){return this._Prop_Config.IsPreview}},RuntimeGeneralInstance={_Ajax:function(e,t,n,a){jQuery.ajax({url:e,type:"POST",dataType:"json",data:t}).done(function(e){if(!e.success){var t=e.message;StringUtility.IsNullOrEmpty(t)&&(t=e.traceMsg),DialogUtility.AlertText(t,a)}n.call(a,e)}).always(n&&function(e,t){})},LoadHtmlDesignContent:function(e,t,n,a,i){this._Ajax(e,n,a,i)},LoadInnerFormButton:function(e,t,n,a){var i=BaseUtility.BuildAction("/Rest/Builder/RunTime/ListButtonRuntime/GetButtonPO",{buttonId:e});this._Ajax(i,t,n,a)},SubmitFormDataComplexPOListToServer:function(e,t,n,a,i,r,o){var l=BaseUtility.BuildAction("/Rest/Builder/RunTime/InnerFormButtonRuntime/ReceiveHandler",{}),s={formRecordComplexPOString:encodeURIComponent(JsonUtility.JsonToString(e)),innerFormButtonId:n,listButtonId:a,recordId:t,operationTypeName:i};this._Ajax(l,s,r,o),console.log(e)},DeleteTableRecord:function(e,t,n,a){AjaxUtility.Post("/Rest/Builder/RunTime/DataSetRuntime/DeleteTableRecord",{tableId:e,pkValue:t},function(e){e.success&&n(e)},a)},DeleteDataSetRecord:function(t,e,n,a){AjaxUtility.Post("/Rest/Builder/RunTime/DataSetRuntime/DeleteDataSetRecord",{dataSetId:e,pkValue:n},function(e){e.success&&WLDCT_ListTableContainer.TryReloadForListFormButton(t)},a)},GetDataSetData:function(e,t,n){var a=JSON.stringify(e);AjaxUtility.PostRequestBody("/Rest/Builder/RunTime/DataSetRuntime/GetDataSetData",a,function(e){t.call(n,e)},n)},GetUrlParas:function(){if(this.menuRightUrlParaJson)return this.menuRightUrlParaJson;var e=BaseUtility.GetUrlParaValue("menuRightUrlPara");if(StringUtility.IsNullOrEmpty(e))return"";if("{"==e.charAt(0)||"["==e.charAt(0))try{return JsonUtility.StringToJson(e)}catch(e){}return this.menuRightUrlParaJson=e},TryGetUrlParaValueByFieldName:function(e,t){var n=this.GetUrlParas();if(n&&"string"!=typeof n)for(var a=0;a<n.length;a++){var i=n[a];if(i.ActionType==e&&i.FieldName==t)return i.Value}return""},TryGetUrlParaChangeMainDataSetId:function(){var e=this.GetUrlParas();if(e&&"string"!=typeof e)for(var t=0;t<e.length;t++){var n=e[t];if("ChangeMainDataSet"==n.ActionType)return n.DataSetId}return""},TryGetUrlParaViewOnly:function(){var e=this.GetUrlParas();if(e&&"string"!=typeof e)for(var t=0;t<e.length;t++){if("ViewOnly"==e[t].ActionType)return!0}return!1},TryGetMenuOuterId:function(){return BaseUtility.GetUrlParaValue("menuOuterId")}},ValidateRulesRuntime={NoEmpty:"NoEmpty",getValidateTipElem:function(){return"<span name='validate-tip' style='color: red'>*</span> "},getValidateRules:function(e){if(e.attr("validaterules")){var t=decodeURIComponent(e.attr("validaterules"));return JsonUtility.StringToJson(t)}return null},ValidateSubmitEnable:function(){for(var e=$("[tablename][serialize='true']").not($("[control_category='DynamicContainer']").find("[jbuild4dc_custom='true']")),t={success:!0,errors:[]},n=0;n<e.length;n++){var a=$(e[n]),i=ValidateRulesRuntime.getValidateRules(a);if(i&&0<i.rules.length)for(var r={labName:this.tryGetValidateErrorName(a),errors:[],$elem:null},o=HTMLControl.TryGetFieldTransferPO(a,"ValidateSubmitEnable","ValidateSubmitEnable","ValidateSubmitEnable").value,l=0;l<i.rules.length;l++){i.rules[l].validateType==ValidateRulesRuntime.NoEmpty&&(""==StringUtility.Trim(o)||StringUtility.IsNullOrEmpty(o))&&r.errors.push("不能为空!"),0<r.errors.length&&(r.$elem=a,t.success=!1,t.errors.push(r))}}return t=HTMLPageObjectInstanceProxy.CallValidateEveryFromControl(t)},tryGetValidateErrorName:function(e){var t="",n=e.parent().prev();return n&&0<n.length&&(t=n.text().replace("*","").replace("：","")),t},AlertValidateErrors:function(e){if(!e.success){for(var t="",n=0;n<e.errors.length;n++){var a=e.errors[n];t+=a.labName+"   【"+a.errors.join(",")+"】<br />"}DialogUtility.Alert(window,DialogUtility.DialogId05,{autoResize:!0,height:"auto",width:300,title:"系统提示"},t);for(var i=0;i<e.errors.length;i++){var r=e.errors[i];"WFDCT_RadioGroup"==r.$elem.attr("client_resolve")?r.$elem.parent().addClass("html-design-input-control-error-status-radio-group"):r.$elem.addClass("html-design-input-control-error-status")}window.setTimeout(function(){$(".html-design-input-control-error-status").removeClass("html-design-input-control-error-status"),$(".html-design-input-control-error-status-radio-group").removeClass("html-design-input-control-error-status-radio-group")},4e3)}return e.success}};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(n){"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t||(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),n(t,e,e.document)}:n(jQuery,window,document)}(function(W,E,g,G){var p,_,t,e,b=function v(S){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new _(e?rt(this[p.iApiIndex]):this)},this.fnAddData=function(e,t){var n=this.api(!0),a=W.isArray(e)&&(W.isArray(e[0])||W.isPlainObject(e[0]))?n.rows.add(e):n.row.add(e);return(t===G||t)&&n.draw(),a.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],a=n.oScroll;e===G||e?t.draw(!1):""===a.sX&&""===a.sY||He(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===G||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var a=this.api(!0),i=a.rows(e),r=i.settings()[0],o=r.aoData[i[0][0]];return i.remove(),t&&t.call(this,r,o),(n===G||n)&&a.draw(),o},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,a,i,r){var o=this.api(!0);null===t||t===G?o.search(e,n,a,r):o.column(t).search(e,n,a,r),o.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e===G)return n.data().toArray();var a=e.nodeName?e.nodeName.toLowerCase():"";return t!==G||"td"==a||"th"==a?n.cell(e,t).data():n.row(e).data()||null},this.fnGetNodes=function(e){var t=this.api(!0);return e!==G?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"!=n&&"TH"!=n)return null;var a=t.cell(e).index();return[a.row,a.columnVisible,a.column]},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===G||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var a=this.api(!0).column(e).visible(t);(n===G||n)&&a.columns.adjust().draw()},this.fnSettings=function(){return rt(this[p.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,a,i){var r=this.api(!0);return n===G||null===n?r.row(t).data(e):r.cell(t,n).data(e),(i===G||i)&&r.columns.adjust(),(a===G||a)&&r.draw(),0},this.fnVersionCheck=p.fnVersionCheck;var I=this,w=S===G,R=this.length;for(var e in w&&(S={}),this.oApi=this.internal=p.internal,v.ext.internal)e&&(this[e]=Bt(e));return this.each(function(){var r,o=1<R?st({},S,!0):S,l=0,e=this.getAttribute("id"),s=!1,t=v.defaults,d=W(this);if("table"==this.nodeName.toLowerCase()){L(t),N(t.column),F(t,t,!0),F(t.column,t.column,!0),F(t,W.extend(o,d.data()));var n=v.settings;for(l=0,r=n.length;l<r;l++){var a=n[l];if(a.nTable==this||a.nTHead&&a.nTHead.parentNode==this||a.nTFoot&&a.nTFoot.parentNode==this){var i=o.bRetrieve!==G?o.bRetrieve:t.bRetrieve,u=o.bDestroy!==G?o.bDestroy:t.bDestroy;if(w||i)return a.oInstance;if(u){a.oInstance.fnDestroy();break}return void ot(a,0,"Cannot reinitialise DataTable",3)}if(a.sTableId==this.id){n.splice(l,1);break}}null!==e&&""!==e||(e="DataTables_Table_"+v.ext._unique++,this.id=e);var c=W.extend(!0,{},v.models.oSettings,{sDestroyWidth:d[0].style.width,sInstance:e,sTableId:e});c.nTable=this,c.oApi=I.internal,c.oInit=o,n.push(c),c.oInstance=1===I.length?I:d.dataTable(),L(o),x(o.oLanguage),o.aLengthMenu&&!o.iDisplayLength&&(o.iDisplayLength=W.isArray(o.aLengthMenu[0])?o.aLengthMenu[0][0]:o.aLengthMenu[0]),o=st(W.extend(!0,{},t),o),lt(c.oFeatures,o,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),lt(c,o,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),lt(c.oScroll,o,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),lt(c.oLanguage,o,"fnInfoCallback"),ut(c,"aoDrawCallback",o.fnDrawCallback,"user"),ut(c,"aoServerParams",o.fnServerParams,"user"),ut(c,"aoStateSaveParams",o.fnStateSaveParams,"user"),ut(c,"aoStateLoadParams",o.fnStateLoadParams,"user"),ut(c,"aoStateLoaded",o.fnStateLoaded,"user"),ut(c,"aoRowCallback",o.fnRowCallback,"user"),ut(c,"aoRowCreatedCallback",o.fnCreatedRow,"user"),ut(c,"aoHeaderCallback",o.fnHeaderCallback,"user"),ut(c,"aoFooterCallback",o.fnFooterCallback,"user"),ut(c,"aoInitComplete",o.fnInitComplete,"user"),ut(c,"aoPreDrawCallback",o.fnPreDrawCallback,"user"),c.rowIdFn=X(o.rowId),P(c);var f=c.oClasses;if(W.extend(f,v.ext.classes,o.oClasses),d.addClass(f.sTable),c.iInitDisplayStart===G&&(c.iInitDisplayStart=o.iDisplayStart,c._iDisplayStart=o.iDisplayStart),null!==o.iDeferLoading){c.bDeferLoading=!0;var h=W.isArray(o.iDeferLoading);c._iRecordsDisplay=h?o.iDeferLoading[0]:o.iDeferLoading,c._iRecordsTotal=h?o.iDeferLoading[1]:o.iDeferLoading}var p=c.oLanguage;W.extend(!0,p,o.oLanguage),p.sUrl&&(W.ajax({dataType:"json",url:p.sUrl,success:function(e){x(e),F(t.oLanguage,e),W.extend(!0,p,e),Ne(c)},error:function(){Ne(c)}}),s=!0),null===o.asStripeClasses&&(c.asStripeClasses=[f.sStripeOdd,f.sStripeEven]);var m=c.asStripeClasses,T=d.children("tbody").find("tr").eq(0);-1!==W.inArray(!0,W.map(m,function(e,t){return T.hasClass(e)}))&&(W("tbody tr",this).removeClass(m.join(" ")),c.asDestroyStripes=m.slice());var g,_=[],b=this.getElementsByTagName("thead");if(0!==b.length&&(ue(c.aoHeader,b[0]),_=ce(c)),null===o.aoColumns)for(g=[],l=0,r=_.length;l<r;l++)g.push(null);else g=o.aoColumns;for(l=0,r=g.length;l<r;l++)B(c,_?_[l]:null);if(U(c,o.aoColumnDefs,g,function(e,t){O(c,e,t)}),T.length){var C=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};W(T[0]).children("th, td").each(function(e,t){var n=c.aoColumns[e];if(n.mData===e){var a=C(t,"sort")||C(t,"order"),i=C(t,"filter")||C(t,"search");null===a&&null===i||(n.mData={_:e+".display",sort:null!==a?e+".@data-"+a:G,type:null!==a?e+".@data-"+a:G,filter:null!==i?e+".@data-"+i:G},O(c,e))}})}var y=c.oFeatures,D=function(){if(o.aaSorting===G){var e=c.aaSorting;for(l=0,r=e.length;l<r;l++)e[l][1]=c.aoColumns[l].asSorting[0]}tt(c),y.bSort&&ut(c,"aoDrawCallback",function(){if(c.bSorted){var e=Xe(c),n={};W.each(e,function(e,t){n[t.src]=t.dir}),ct(c,null,"order",[c,e,n]),Qe(c)}}),ut(c,"aoDrawCallback",function(){(c.bSorted||"ssp"===pt(c)||y.bDeferRender)&&tt(c)},"sc");var t=d.children("caption").each(function(){this._captionSide=W(this).css("caption-side")}),n=d.children("thead");0===n.length&&(n=W("<thead/>").appendTo(d)),c.nTHead=n[0];var a=d.children("tbody");0===a.length&&(a=W("<tbody/>").appendTo(d)),c.nTBody=a[0];var i=d.children("tfoot");if(0===i.length&&0<t.length&&(""!==c.oScroll.sX||""!==c.oScroll.sY)&&(i=W("<tfoot/>").appendTo(d)),0===i.length||0===i.children().length?d.addClass(f.sNoFooter):0<i.length&&(c.nTFoot=i[0],ue(c.aoFooter,c.nTFoot)),o.aaData)for(l=0;l<o.aaData.length;l++)M(c,o.aaData[l]);else(c.bDeferLoading||"dom"==pt(c))&&$(c,W(c.nTBody).children("tr"));c.aiDisplay=c.aiDisplayMaster.slice(),!(c.bInitialised=!0)===s&&Ne(c)};o.bStateSave?(y.bStateSave=!0,ut(c,"aoDrawCallback",at,"state_save"),it(c,o,D)):D()}else ot(null,0,"Non-table node initialisation ("+this.nodeName+")",2)}),I=null,this},n={},a=/[\r\n]/g,i=/<.*?>/g,r=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,o=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),l=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi,s=function(e){return!e||!0===e||"-"===e},h=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},d=function(e,t){return n[t]||(n[t]=new RegExp(ve(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(n[t],"."):e},u=function(e,t,n){var a="string"==typeof e;return!!s(e)||(t&&a&&(e=d(e,t)),n&&a&&(e=e.replace(l,"")),!isNaN(parseFloat(e))&&isFinite(e))},c=function(e,t,n){return!!s(e)||((s(a=e)||"string"==typeof a)&&!!u(f(e),t,n)||null);var a},k=function(e,t,n){var a=[],i=0,r=e.length;if(n!==G)for(;i<r;i++)e[i]&&e[i][t]&&a.push(e[i][t][n]);else for(;i<r;i++)e[i]&&a.push(e[i][t]);return a},C=function(e,t,n,a){var i=[],r=0,o=t.length;if(a!==G)for(;r<o;r++)e[t[r]][n]&&i.push(e[t[r]][n][a]);else for(;r<o;r++)i.push(e[t[r]][n]);return i},m=function(e,t){var n,a=[];t===G?(t=0,n=e):(n=t,t=e);for(var i=t;i<n;i++)a.push(i);return a},y=function(e){for(var t=[],n=0,a=e.length;n<a;n++)e[n]&&t.push(e[n]);return t},f=function(e){return e.replace(i,"")},T=function(e){if(function(e){if(e.length<2)return!0;for(var t=e.slice().sort(),n=t[0],a=1,i=t.length;a<i;a++){if(t[a]===n)return!1;n=t[a]}return!0}(e))return e.slice();var t,n,a,i=[],r=e.length,o=0;e:for(n=0;n<r;n++){for(t=e[n],a=0;a<o;a++)if(i[a]===t)continue e;i.push(t),o++}return i};function D(n){var a,i,r={};W.each(n,function(e,t){(a=e.match(/^([^A-Z]+?)([A-Z])/))&&-1!=="a aa ai ao as b fn i m o s ".indexOf(a[1]+" ")&&(i=e.replace(a[0],a[2].toLowerCase()),r[i]=e,"o"===a[1]&&D(n[e]))}),n._hungarianMap=r}function F(n,a,i){var r;n._hungarianMap||D(n),W.each(a,function(e,t){(r=n._hungarianMap[e])===G||!i&&a[r]!==G||("o"===r.charAt(0)?(a[r]||(a[r]={}),W.extend(!0,a[r],a[e]),F(n[r],a[r],i)):a[r]=a[e])})}function x(e){var t=b.defaults.oLanguage,n=t.sDecimal;if(n&&Nt(n),e){var a=e.sZeroRecords;!e.sEmptyTable&&a&&"No data available in table"===t.sEmptyTable&&lt(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&a&&"Loading..."===t.sLoadingRecords&&lt(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&n!==i&&Nt(i)}}b.util={throttle:function(a,e){var i,r,o=e!==G?e:200;return function(){var e=this,t=+new Date,n=arguments;i&&t<i+o?(clearTimeout(r),r=setTimeout(function(){i=G,a.apply(e,n)},o)):(i=t,a.apply(e,n))}},escapeRegex:function(e){return e.replace(o,"\\$1")}};var v=function(e,t,n){e[t]!==G&&(e[n]=e[t])};function L(e){v(e,"ordering","bSort"),v(e,"orderMulti","bSortMulti"),v(e,"orderClasses","bSortClasses"),v(e,"orderCellsTop","bSortCellsTop"),v(e,"order","aaSorting"),v(e,"orderFixed","aaSortingFixed"),v(e,"paging","bPaginate"),v(e,"pagingType","sPaginationType"),v(e,"pageLength","iDisplayLength"),v(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,a=t.length;n<a;n++)t[n]&&F(b.models.oSearch,t[n])}function N(e){v(e,"orderable","bSortable"),v(e,"orderData","aDataSort"),v(e,"orderSequence","asSorting"),v(e,"orderDataType","sortDataType");var t=e.aDataSort;"number"!=typeof t||W.isArray(t)||(e.aDataSort=[t])}function P(e){if(!b.__browser){var t={};b.__browser=t;var n=W("<div/>").css({position:"fixed",top:0,left:-1*W(E).scrollLeft(),height:1,width:1,overflow:"hidden"}).append(W("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(W("<div/>").css({width:"100%",height:10}))).appendTo("body"),a=n.children(),i=a.children();t.barWidth=a[0].offsetWidth-a[0].clientWidth,t.bScrollOversize=100===i[0].offsetWidth&&100!==a[0].clientWidth,t.bScrollbarLeft=1!==Math.round(i.offset().left),t.bBounding=!!n[0].getBoundingClientRect().width,n.remove()}W.extend(e.oBrowser,b.__browser),e.oScroll.iBarWidth=b.__browser.barWidth}function S(e,t,n,a,i,r){var o,l=a,s=!1;for(n!==G&&(o=n,s=!0);l!==i;)e.hasOwnProperty(l)&&(o=s?t(o,e[l],l,e):e[l],s=!0,l+=r);return o}function B(e,t){var n=b.defaults.column,a=e.aoColumns.length,i=W.extend({},b.models.oColumn,n,{nTh:t||g.createElement("th"),sTitle:n.sTitle?n.sTitle:t?t.innerHTML:"",aDataSort:n.aDataSort?n.aDataSort:[a],mData:n.mData?n.mData:a,idx:a});e.aoColumns.push(i);var r=e.aoPreSearchCols;r[a]=W.extend({},b.models.oSearch,r[a]),O(e,a,W(t).data())}function O(e,t,n){var a=e.aoColumns[t],i=e.oClasses,r=W(a.nTh);if(!a.sWidthOrig){a.sWidthOrig=r.attr("width")||null;var o=(r.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);o&&(a.sWidthOrig=o[1])}n!==G&&null!==n&&(N(n),F(b.defaults.column,n),n.mDataProp===G||n.mData||(n.mData=n.mDataProp),n.sType&&(a._sManualType=n.sType),n.className&&!n.sClass&&(n.sClass=n.className),n.sClass&&r.addClass(n.sClass),W.extend(a,n),lt(a,n,"sWidth","sWidthOrig"),n.iDataSort!==G&&(a.aDataSort=[n.iDataSort]),lt(a,n,"aDataSort"));var l=a.mData,s=X(l),d=a.mRender?X(a.mRender):null,u=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};a._bAttrSrc=W.isPlainObject(l)&&(u(l.sort)||u(l.type)||u(l.filter)),a._setter=null,a.fnGetData=function(e,t,n){var a=s(e,t,G,n);return d&&t?d(a,t,e,n):a},a.fnSetData=function(e,t,n){return K(l)(e,t,n)},"number"!=typeof l&&(e._rowReadObject=!0),e.oFeatures.bSort||(a.bSortable=!1,r.addClass(i.sSortableNone));var c=-1!==W.inArray("asc",a.asSorting),f=-1!==W.inArray("desc",a.asSorting);a.bSortable&&(c||f)?a.sSortingClassJUI=c&&!f?(a.sSortingClass=i.sSortableAsc,i.sSortJUIAscAllowed):!c&&f?(a.sSortingClass=i.sSortableDesc,i.sSortJUIDescAllowed):(a.sSortingClass=i.sSortable,i.sSortJUI):(a.sSortingClass=i.sSortableNone,a.sSortingClassJUI="")}function j(e){if(!1!==e.oFeatures.bAutoWidth){var t=e.aoColumns;ke(e);for(var n=0,a=t.length;n<a;n++)t[n].nTh.style.width=t[n].sWidth}var i=e.oScroll;""===i.sY&&""===i.sX||He(e),ct(e,null,"column-sizing",[e])}function q(e,t){var n=A(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function I(e,t){var n=A(e,"bVisible"),a=W.inArray(t,n);return-1!==a?a:null}function V(e){var n=0;return W.each(e.aoColumns,function(e,t){t.bVisible&&"none"!==W(t.nTh).css("display")&&n++}),n}function A(e,n){var a=[];return W.map(e.aoColumns,function(e,t){e[n]&&a.push(t)}),a}function w(e){var t,n,a,i,r,o,l,s,d,u=e.aoColumns,c=e.aoData,f=b.ext.type.detect;for(t=0,n=u.length;t<n;t++)if(d=[],!(l=u[t]).sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(a=0,i=f.length;a<i;a++){for(r=0,o=c.length;r<o&&(d[r]===G&&(d[r]=R(e,r,t,"type")),(s=f[a](d[r],e))||a===f.length-1)&&"html"!==s;r++);if(s){l.sType=s;break}}l.sType||(l.sType="string")}}function U(e,t,n,a){var i,r,o,l,s,d,u,c=e.aoColumns;if(t)for(i=t.length-1;0<=i;i--){var f=(u=t[i]).targets!==G?u.targets:u.aTargets;for(W.isArray(f)||(f=[f]),o=0,l=f.length;o<l;o++)if("number"==typeof f[o]&&0<=f[o]){for(;c.length<=f[o];)B(e);a(f[o],u)}else if("number"==typeof f[o]&&f[o]<0)a(c.length+f[o],u);else if("string"==typeof f[o])for(s=0,d=c.length;s<d;s++)("_all"==f[o]||W(c[s].nTh).hasClass(f[o]))&&a(s,u)}if(n)for(i=0,r=n.length;i<r;i++)a(i,n[i])}function M(e,t,n,a){var i=e.aoData.length,r=W.extend(!0,{},b.models.oRow,{src:n?"dom":"data",idx:i});r._aData=t,e.aoData.push(r);for(var o=e.aoColumns,l=0,s=o.length;l<s;l++)o[l].sType=null;e.aiDisplayMaster.push(i);var d=e.rowIdFn(t);return d!==G&&(e.aIds[d]=r),!n&&e.oFeatures.bDeferRender||ae(e,i,n,a),i}function $(n,e){var a;return e instanceof W||(e=W(e)),e.map(function(e,t){return a=ne(n,t),M(n,a.data,t,a.cells)})}function R(e,t,n,a){var i=e.iDraw,r=e.aoColumns[n],o=e.aoData[t]._aData,l=r.sDefaultContent,s=r.fnGetData(o,a,{settings:e,row:t,col:n});if(s===G)return e.iDrawError!=i&&null===l&&(ot(e,0,"Requested unknown parameter "+("function"==typeof r.mData?"{function}":"'"+r.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=i),l;if(s!==o&&null!==s||null===l||a===G){if("function"==typeof s)return s.call(o)}else s=l;return null===s&&"display"==a?"":s}function H(e,t,n,a){var i=e.aoColumns[n],r=e.aoData[t]._aData;i.fnSetData(r,a,{settings:e,row:t,col:n})}var J=/\[.*?\]$/,z=/\(\)$/;function Y(e){return W.map(e.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function X(i){if(W.isPlainObject(i)){var r={};return W.each(i,function(e,t){t&&(r[e]=X(t))}),function(e,t,n,a){var i=r[t]||r._;return i!==G?i(e,t,n,a):e}}if(null===i)return function(e){return e};if("function"==typeof i)return function(e,t,n,a){return i(e,t,n,a)};if("string"!=typeof i||-1===i.indexOf(".")&&-1===i.indexOf("[")&&-1===i.indexOf("("))return function(e,t){return e[i]};return function(e,t){return function e(t,n,a){var i,r,o,l;if(""!==a)for(var s=Y(a),d=0,u=s.length;d<u;d++){if(i=s[d].match(J),r=s[d].match(z),i){if(s[d]=s[d].replace(J,""),""!==s[d]&&(t=t[s[d]]),o=[],s.splice(0,d+1),l=s.join("."),W.isArray(t))for(var c=0,f=t.length;c<f;c++)o.push(e(t[c],n,l));var h=i[0].substring(1,i[0].length-1);t=""===h?o:o.join(h);break}if(r)s[d]=s[d].replace(z,""),t=t[s[d]]();else{if(null===t||t[s[d]]===G)return G;t=t[s[d]]}}return t}(e,t,i)}}function K(a){if(W.isPlainObject(a))return K(a._);if(null===a)return function(){};if("function"==typeof a)return function(e,t,n){a(e,"set",t,n)};if("string"!=typeof a||-1===a.indexOf(".")&&-1===a.indexOf("[")&&-1===a.indexOf("("))return function(e,t){e[a]=t};return function(e,t){return function e(t,n,a){for(var i,r,o,l,s,d=Y(a),u=d[d.length-1],c=0,f=d.length-1;c<f;c++){if(r=d[c].match(J),o=d[c].match(z),r){if(d[c]=d[c].replace(J,""),t[d[c]]=[],(i=d.slice()).splice(0,c+1),s=i.join("."),W.isArray(n))for(var h=0,p=n.length;h<p;h++)e(l={},n[h],s),t[d[c]].push(l);else t[d[c]]=n;return}o&&(d[c]=d[c].replace(z,""),t=t[d[c]](n)),null!==t[d[c]]&&t[d[c]]!==G||(t[d[c]]={}),t=t[d[c]]}u.match(z)?t=t[u.replace(z,"")](n):t[u.replace(J,"")]=n}(e,t,a)}}function Q(e){return k(e.aoData,"_aData")}function Z(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function ee(e,t,n){for(var a=-1,i=0,r=e.length;i<r;i++)e[i]==t?a=i:e[i]>t&&e[i]--;-1!=a&&n===G&&e.splice(a,1)}function te(n,a,e,t){var i,r,o=n.aoData[a],l=function(e,t){for(;e.childNodes.length;)e.removeChild(e.firstChild);e.innerHTML=R(n,a,t,"display")};if("dom"!==e&&(e&&"auto"!==e||"dom"!==o.src)){var s=o.anCells;if(s)if(t!==G)l(s[t],t);else for(i=0,r=s.length;i<r;i++)l(s[i],i)}else o._aData=ne(n,o,t,t===G?G:o._aData).data;o._aSortData=null,o._aFilterData=null;var d=n.aoColumns;if(t!==G)d[t].sType=null;else{for(i=0,r=d.length;i<r;i++)d[i].sType=null;ie(n,o)}}function ne(e,t,n,i){var a,r,o,l=[],s=t.firstChild,d=0,u=e.aoColumns,c=e._rowReadObject;i=i!==G?i:c?{}:[];var f=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(-1!==n){var a=e.substring(n+1);K(e)(i,t.getAttribute(a))}}},h=function(e){n!==G&&n!==d||(r=u[d],o=W.trim(e.innerHTML),r&&r._bAttrSrc?(K(r.mData._)(i,o),f(r.mData.sort,e),f(r.mData.type,e),f(r.mData.filter,e)):c?(r._setter||(r._setter=K(r.mData)),r._setter(i,o)):i[d]=o);d++};if(s)for(;s;)"TD"!=(a=s.nodeName.toUpperCase())&&"TH"!=a||(h(s),l.push(s)),s=s.nextSibling;else for(var p=0,m=(l=t.anCells).length;p<m;p++)h(l[p]);var T=t.firstChild?t:t.nTr;if(T){var g=T.getAttribute("id");g&&K(e.rowId)(i,g)}return{data:i,cells:l}}function ae(e,t,n,a){var i,r,o,l,s,d=e.aoData[t],u=d._aData,c=[];if(null===d.nTr){for(i=n||g.createElement("tr"),d.nTr=i,d.anCells=c,i._DT_RowIndex=t,ie(e,d),l=0,s=e.aoColumns.length;l<s;l++)o=e.aoColumns[l],(r=n?a[l]:g.createElement(o.sCellType))._DT_CellIndex={row:t,column:l},c.push(r),n&&!o.mRender&&o.mData===l||W.isPlainObject(o.mData)&&o.mData._===l+".display"||(r.innerHTML=R(e,t,l,"display")),o.sClass&&(r.className+=" "+o.sClass),o.bVisible&&!n?i.appendChild(r):!o.bVisible&&n&&r.parentNode.removeChild(r),o.fnCreatedCell&&o.fnCreatedCell.call(e.oInstance,r,R(e,t,l),u,t,l);ct(e,"aoRowCreatedCallback",null,[i,u,t,c])}d.nTr.setAttribute("role","row")}function ie(e,t){var n=t.nTr,a=t._aData;if(n){var i=e.rowIdFn(a);if(i&&(n.id=i),a.DT_RowClass){var r=a.DT_RowClass.split(" ");t.__rowc=t.__rowc?T(t.__rowc.concat(r)):r,W(n).removeClass(t.__rowc.join(" ")).addClass(a.DT_RowClass)}a.DT_RowAttr&&W(n).attr(a.DT_RowAttr),a.DT_RowData&&W(n).data(a.DT_RowData)}}function re(e){var t,n,a,i,r,o=e.nTHead,l=e.nTFoot,s=0===W("th, td",o).length,d=e.oClasses,u=e.aoColumns;for(s&&(i=W("<tr/>").appendTo(o)),t=0,n=u.length;t<n;t++)r=u[t],a=W(r.nTh).addClass(r.sClass),s&&a.appendTo(i),e.oFeatures.bSort&&(a.addClass(r.sSortingClass),!1!==r.bSortable&&(a.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),et(e,r.nTh,t))),r.sTitle!=a[0].innerHTML&&a.html(r.sTitle),ht(e,"header")(e,a,r,d);if(s&&ue(e.aoHeader,o),W(o).find(">tr").attr("role","row"),W(o).find(">tr>th, >tr>td").addClass(d.sHeaderTH),W(l).find(">tr>th, >tr>td").addClass(d.sFooterTH),null!==l){var c=e.aoFooter[0];for(t=0,n=c.length;t<n;t++)(r=u[t]).nTf=c[t].cell,r.sClass&&W(r.nTf).addClass(r.sClass)}}function oe(e,t,n){var a,i,r,o,l,s,d,u,c,f=[],h=[],p=e.aoColumns.length;if(t){for(n===G&&(n=!1),a=0,i=t.length;a<i;a++){for(f[a]=t[a].slice(),f[a].nTr=t[a].nTr,r=p-1;0<=r;r--)e.aoColumns[r].bVisible||n||f[a].splice(r,1);h.push([])}for(a=0,i=f.length;a<i;a++){if(d=f[a].nTr)for(;s=d.firstChild;)d.removeChild(s);for(r=0,o=f[a].length;r<o;r++)if(c=u=1,h[a][r]===G){for(d.appendChild(f[a][r].cell),h[a][r]=1;f[a+u]!==G&&f[a][r].cell==f[a+u][r].cell;)h[a+u][r]=1,u++;for(;f[a][r+c]!==G&&f[a][r].cell==f[a][r+c].cell;){for(l=0;l<u;l++)h[a+l][r+c]=1;c++}W(f[a][r].cell).attr("rowspan",u).attr("colspan",c)}}}}function le(e){var t=ct(e,"aoPreDrawCallback","preDraw",[e]);if(-1===W.inArray(!1,t)){var n=[],a=0,i=e.asStripeClasses,r=i.length,o=(e.aoOpenRows.length,e.oLanguage),l=e.iInitDisplayStart,s="ssp"==pt(e),d=e.aiDisplay;e.bDrawing=!0,l!==G&&-1!==l&&(e._iDisplayStart=s?l:l>=e.fnRecordsDisplay()?0:l,e.iInitDisplayStart=-1);var u=e._iDisplayStart,c=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,Me(e,!1);else if(s){if(!e.bDestroying&&!he(e))return}else e.iDraw++;if(0!==d.length)for(var f=s?0:u,h=s?e.aoData.length:c,p=f;p<h;p++){var m=d[p],T=e.aoData[m];null===T.nTr&&ae(e,m);var g=T.nTr;if(0!==r){var _=i[a%r];T._sRowStripe!=_&&(W(g).removeClass(T._sRowStripe).addClass(_),T._sRowStripe=_)}ct(e,"aoRowCallback",null,[g,T._aData,a,p,m]),n.push(g),a++}else{var b=o.sZeroRecords;1==e.iDraw&&"ajax"==pt(e)?b=o.sLoadingRecords:o.sEmptyTable&&0===e.fnRecordsTotal()&&(b=o.sEmptyTable),n[0]=W("<tr/>",{class:r?i[0]:""}).append(W("<td />",{valign:"top",colSpan:V(e),class:e.oClasses.sRowEmpty}).html(b))[0]}ct(e,"aoHeaderCallback","header",[W(e.nTHead).children("tr")[0],Q(e),u,c,d]),ct(e,"aoFooterCallback","footer",[W(e.nTFoot).children("tr")[0],Q(e),u,c,d]);var C=W(e.nTBody);C.children().detach(),C.append(W(n)),ct(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}else Me(e,!1)}function se(e,t){var n=e.oFeatures,a=n.bSort,i=n.bFilter;a&&Ke(e),i?_e(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),!0!==t&&(e._iDisplayStart=0),e._drawHold=t,le(e),e._drawHold=!1}function de(e){var t=e.oClasses,n=W(e.nTable),a=W("<div/>").insertBefore(n),i=e.oFeatures,r=W("<div/>",{id:e.sTableId+"_wrapper",class:t.sWrapper+(e.nTFoot?"":" "+t.sNoFooter)});e.nHolding=a[0],e.nTableWrapper=r[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var o,l,s,d,u,c,f=e.sDom.split(""),h=0;h<f.length;h++){if(o=null,"<"==(l=f[h])){if(s=W("<div/>")[0],"'"==(d=f[h+1])||'"'==d){for(u="",c=2;f[h+c]!=d;)u+=f[h+c],c++;if("H"==u?u=t.sJUIHeader:"F"==u&&(u=t.sJUIFooter),-1!=u.indexOf(".")){var p=u.split(".");s.id=p[0].substr(1,p[0].length-1),s.className=p[1]}else"#"==u.charAt(0)?s.id=u.substr(1,u.length-1):s.className=u;h+=c}r.append(s),r=W(s)}else if(">"==l)r=r.parent();else if("l"==l&&i.bPaginate&&i.bLengthChange)o=Oe(e);else if("f"==l&&i.bFilter)o=ge(e);else if("r"==l&&i.bProcessing)o=Ue(e);else if("t"==l)o=$e(e);else if("i"==l&&i.bInfo)o=Fe(e);else if("p"==l&&i.bPaginate)o=Ve(e);else if(0!==b.ext.feature.length)for(var m=b.ext.feature,T=0,g=m.length;T<g;T++)if(l==m[T].cFeature){o=m[T].fnInit(e);break}if(o){var _=e.aanFeatures;_[l]||(_[l]=[]),_[l].push(o),r.append(o)}}a.replaceWith(r),e.nHolding=null}function ue(e,t){var n,a,i,r,o,l,s,d,u,c,f=W(t).children("tr"),h=function(e,t,n){for(var a=e[t];a[n];)n++;return n};for(e.splice(0,e.length),i=0,l=f.length;i<l;i++)e.push([]);for(i=0,l=f.length;i<l;i++)for(0,a=(n=f[i]).firstChild;a;){if("TD"==a.nodeName.toUpperCase()||"TH"==a.nodeName.toUpperCase())for(d=(d=1*a.getAttribute("colspan"))&&0!==d&&1!==d?d:1,u=(u=1*a.getAttribute("rowspan"))&&0!==u&&1!==u?u:1,s=h(e,i,0),c=1===d,o=0;o<d;o++)for(r=0;r<u;r++)e[i+r][s+o]={cell:a,unique:c},e[i+r].nTr=n;a=a.nextSibling}}function ce(e,t,n){var a=[];n||(n=e.aoHeader,t&&ue(n=[],t));for(var i=0,r=n.length;i<r;i++)for(var o=0,l=n[i].length;o<l;o++)!n[i][o].unique||a[o]&&e.bSortCellsTop||(a[o]=n[i][o].cell);return a}function fe(i,e,t){if(ct(i,"aoServerParams","serverParams",[e]),e&&W.isArray(e)){var r={},o=/(.*?)\[\]$/;W.each(e,function(e,t){var n=t.name.match(o);if(n){var a=n[0];r[a]||(r[a]=[]),r[a].push(t.value)}else r[t.name]=t.value}),e=r}var n,a=i.ajax,l=i.oInstance,s=function(e){ct(i,null,"xhr",[i,e,i.jqXHR]),t(e)};if(W.isPlainObject(a)&&a.data){var d="function"==typeof(n=a.data)?n(e,i):n;e="function"==typeof n&&d?d:W.extend(!0,e,d),delete a.data}var u={data:e,success:function(e){var t=e.error||e.sError;t&&ot(i,0,t),i.json=e,s(e)},dataType:"json",cache:!1,type:i.sServerMethod,error:function(e,t,n){var a=ct(i,null,"xhr",[i,null,i.jqXHR]);-1===W.inArray(!0,a)&&("parsererror"==t?ot(i,0,"Invalid JSON response",1):4===e.readyState&&ot(i,0,"Ajax error",7)),Me(i,!1)}};i.oAjaxData=e,ct(i,null,"preXhr",[i,e]),i.fnServerData?i.fnServerData.call(l,i.sAjaxSource,W.map(e,function(e,t){return{name:t,value:e}}),s,i):i.sAjaxSource||"string"==typeof a?i.jqXHR=W.ajax(W.extend(u,{url:a||i.sAjaxSource})):"function"==typeof a?i.jqXHR=a.call(l,e,s,i):(i.jqXHR=W.ajax(W.extend(u,a)),a.data=n)}function he(t){return!t.bAjaxDataGet||(t.iDraw++,Me(t,!0),fe(t,pe(t),function(e){me(t,e)}),!1)}function pe(e){var t,n,a,i,r=e.aoColumns,o=r.length,l=e.oFeatures,s=e.oPreviousSearch,d=e.aoPreSearchCols,u=[],c=Xe(e),f=e._iDisplayStart,h=!1!==l.bPaginate?e._iDisplayLength:-1,p=function(e,t){u.push({name:e,value:t})};p("sEcho",e.iDraw),p("iColumns",o),p("sColumns",k(r,"sName").join(",")),p("iDisplayStart",f),p("iDisplayLength",h);var m={draw:e.iDraw,columns:[],order:[],start:f,length:h,search:{value:s.sSearch,regex:s.bRegex}};for(t=0;t<o;t++)a=r[t],i=d[t],n="function"==typeof a.mData?"function":a.mData,m.columns.push({data:n,name:a.sName,searchable:a.bSearchable,orderable:a.bSortable,search:{value:i.sSearch,regex:i.bRegex}}),p("mDataProp_"+t,n),l.bFilter&&(p("sSearch_"+t,i.sSearch),p("bRegex_"+t,i.bRegex),p("bSearchable_"+t,a.bSearchable)),l.bSort&&p("bSortable_"+t,a.bSortable);l.bFilter&&(p("sSearch",s.sSearch),p("bRegex",s.bRegex)),l.bSort&&(W.each(c,function(e,t){m.order.push({column:t.col,dir:t.dir}),p("iSortCol_"+e,t.col),p("sSortDir_"+e,t.dir)}),p("iSortingCols",c.length));var T=b.ext.legacy.ajax;return null===T?e.sAjaxSource?u:m:T?u:m}function me(e,n){var t=function(e,t){return n[e]!==G?n[e]:n[t]},a=Te(e,n),i=t("sEcho","draw"),r=t("iTotalRecords","recordsTotal"),o=t("iTotalDisplayRecords","recordsFiltered");if(i){if(1*i<e.iDraw)return;e.iDraw=1*i}Z(e),e._iRecordsTotal=parseInt(r,10),e._iRecordsDisplay=parseInt(o,10);for(var l=0,s=a.length;l<s;l++)M(e,a[l]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,le(e),e._bInitComplete||Pe(e,n),e.bAjaxDataGet=!0,Me(e,!1)}function Te(e,t){var n=W.isPlainObject(e.ajax)&&e.ajax.dataSrc!==G?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===n?t.aaData||t[n]:""!==n?X(n)(t):t}function ge(n){var e=n.oClasses,t=n.sTableId,a=n.oLanguage,i=n.oPreviousSearch,r=n.aanFeatures,o='<input type="search" class="'+e.sFilterInput+'"/>',l=a.sSearch;l=l.match(/_INPUT_/)?l.replace("_INPUT_",o):l+o;var s=W("<div/>",{id:r.f?null:t+"_filter",class:e.sFilter}).append(W("<label/>").append(l)),d=function(){r.f;var e=this.value?this.value:"";e!=i.sSearch&&(_e(n,{sSearch:e,bRegex:i.bRegex,bSmart:i.bSmart,bCaseInsensitive:i.bCaseInsensitive}),n._iDisplayStart=0,le(n))},u=null!==n.searchDelay?n.searchDelay:"ssp"===pt(n)?400:0,c=W("input",s).val(i.sSearch).attr("placeholder",a.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",u?je(d,u):d).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",t);return W(n.nTable).on("search.dt.DT",function(e,t){if(n===t)try{c[0]!==g.activeElement&&c.val(i.sSearch)}catch(e){}}),s[0]}function _e(e,t,n){var a=e.oPreviousSearch,i=e.aoPreSearchCols,r=function(e){a.sSearch=e.sSearch,a.bRegex=e.bRegex,a.bSmart=e.bSmart,a.bCaseInsensitive=e.bCaseInsensitive},o=function(e){return e.bEscapeRegex!==G?!e.bEscapeRegex:e.bRegex};if(w(e),"ssp"!=pt(e)){ye(e,t.sSearch,n,o(t),t.bSmart,t.bCaseInsensitive),r(t);for(var l=0;l<i.length;l++)Ce(e,i[l].sSearch,l,o(i[l]),i[l].bSmart,i[l].bCaseInsensitive);be(e)}else r(t);e.bFiltered=!0,ct(e,null,"search",[e])}function be(e){for(var t,n,a=b.ext.search,i=e.aiDisplay,r=0,o=a.length;r<o;r++){for(var l=[],s=0,d=i.length;s<d;s++)n=i[s],t=e.aoData[n],a[r](e,t._aFilterData,n,t._aData,s)&&l.push(n);i.length=0,W.merge(i,l)}}function Ce(e,t,n,a,i,r){if(""!==t){for(var o,l=[],s=e.aiDisplay,d=De(t,a,i,r),u=0;u<s.length;u++)o=e.aoData[s[u]]._aFilterData[n],d.test(o)&&l.push(s[u]);e.aiDisplay=l}}function ye(e,t,n,a,i,r){var o,l,s,d=De(t,a,i,r),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster,f=[];if(0!==b.ext.search.length&&(n=!0),l=we(e),t.length<=0)e.aiDisplay=c.slice();else{for((l||n||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),o=e.aiDisplay,s=0;s<o.length;s++)d.test(e.aoData[o[s]]._sFilterRow)&&f.push(o[s]);e.aiDisplay=f}}function De(e,t,n,a){(e=t?e:ve(e),n)&&(e="^(?=.*?"+W.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")}).join(")(?=.*?")+").*$");return new RegExp(e,a?"i":"")}var ve=b.util.escapeRegex,Se=W("<div>")[0],Ie=Se.textContent!==G;function we(e){var t,n,a,i,r,o,l,s,d=e.aoColumns,u=b.ext.type.search,c=!1;for(n=0,i=e.aoData.length;n<i;n++)if(!(s=e.aoData[n])._aFilterData){for(o=[],a=0,r=d.length;a<r;a++)(t=d[a]).bSearchable?(l=R(e,n,a,"filter"),u[t.sType]&&(l=u[t.sType](l)),null===l&&(l=""),"string"!=typeof l&&l.toString&&(l=l.toString())):l="",l.indexOf&&-1!==l.indexOf("&")&&(Se.innerHTML=l,l=Ie?Se.textContent:Se.innerText),l.replace&&(l=l.replace(/[\r\n]/g,"")),o.push(l);s._aFilterData=o,s._sFilterRow=o.join("  "),c=!0}return c}function Re(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function Ee(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function Fe(e){var t=e.sTableId,n=e.aanFeatures.i,a=W("<div/>",{class:e.oClasses.sInfo,id:n?null:t+"_info"});return n||(e.aoDrawCallback.push({fn:xe,sName:"information"}),a.attr("role","status").attr("aria-live","polite"),W(e.nTable).attr("aria-describedby",t+"_info")),a[0]}function xe(e){var t=e.aanFeatures.i;if(0!==t.length){var n=e.oLanguage,a=e._iDisplayStart+1,i=e.fnDisplayEnd(),r=e.fnRecordsTotal(),o=e.fnRecordsDisplay(),l=o?n.sInfo:n.sInfoEmpty;o!==r&&(l+=" "+n.sInfoFiltered),l=Le(e,l+=n.sInfoPostFix);var s=n.fnInfoCallback;null!==s&&(l=s.call(e.oInstance,e,a,i,r,o,l)),W(t).html(l)}}function Le(e,t){var n=e.fnFormatNumber,a=e._iDisplayStart+1,i=e._iDisplayLength,r=e.fnRecordsDisplay(),o=-1===i;return t.replace(/_START_/g,n.call(e,a)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,r)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(a/i))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(r/i)))}function Ne(n){var a,e,t,i=n.iInitDisplayStart,r=n.aoColumns,o=n.oFeatures,l=n.bDeferLoading;if(n.bInitialised){for(de(n),re(n),oe(n,n.aoHeader),oe(n,n.aoFooter),Me(n,!0),o.bAutoWidth&&ke(n),a=0,e=r.length;a<e;a++)(t=r[a]).sWidth&&(t.nTh.style.width=Ye(t.sWidth));ct(n,null,"preInit",[n]),se(n);var s=pt(n);("ssp"!=s||l)&&("ajax"==s?fe(n,[],function(e){var t=Te(n,e);for(a=0;a<t.length;a++)M(n,t[a]);n.iInitDisplayStart=i,se(n),Me(n,!1),Pe(n,e)}):(Me(n,!1),Pe(n)))}else setTimeout(function(){Ne(n)},200)}function Pe(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&j(e),ct(e,null,"plugin-init",[e,t]),ct(e,"aoInitComplete","init",[e,t])}function Be(e,t){var n=parseInt(t,10);e._iDisplayLength=n,ft(e),ct(e,null,"length",[e,n])}function Oe(a){for(var e=a.oClasses,t=a.sTableId,n=a.aLengthMenu,i=W.isArray(n[0]),r=i?n[0]:n,o=i?n[1]:n,l=W("<select/>",{name:t+"_length","aria-controls":t,class:e.sLengthSelect}),s=0,d=r.length;s<d;s++)l[0][s]=new Option("number"==typeof o[s]?a.fnFormatNumber(o[s]):o[s],r[s]);var u=W("<div><label/></div>").addClass(e.sLength);return a.aanFeatures.l||(u[0].id=t+"_length"),u.children().append(a.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),W("select",u).val(a._iDisplayLength).on("change.DT",function(e){Be(a,W(this).val()),le(a)}),W(a.nTable).on("length.dt.DT",function(e,t,n){a===t&&W("select",u).val(n)}),u[0]}function Ve(e){var t=e.sPaginationType,u=b.ext.pager[t],c="function"==typeof u,f=function(e){le(e)},n=W("<div/>").addClass(e.oClasses.sPaging+t)[0],h=e.aanFeatures;return c||u.fnInit(e,n,f),h.p||(n.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(e){if(c){var t,n,a=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay(),o=-1===i,l=o?0:Math.ceil(a/i),s=o?1:Math.ceil(r/i),d=u(l,s);for(t=0,n=h.p.length;t<n;t++)ht(e,"pageButton")(e,h.p[t],t,d,l,s)}else u.fnUpdate(e,f)},sName:"pagination"})),n}function Ae(e,t,n){var a=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay();0===r||-1===i?a=0:"number"==typeof t?r<(a=t*i)&&(a=0):"first"==t?a=0:"previous"==t?(a=0<=i?a-i:0)<0&&(a=0):"next"==t?a+i<r&&(a+=i):"last"==t?a=Math.floor((r-1)/i)*i:ot(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==a;return e._iDisplayStart=a,o&&(ct(e,null,"page",[e]),n&&le(e)),o}function Ue(e){return W("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing",class:e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function Me(e,t){e.oFeatures.bProcessing&&W(e.aanFeatures.r).css("display",t?"block":"none"),ct(e,null,"processing",[e,t])}function $e(e){var t=W(e.nTable);t.attr("role","grid");var n=e.oScroll;if(""===n.sX&&""===n.sY)return e.nTable;var a=n.sX,i=n.sY,r=e.oClasses,o=t.children("caption"),l=o.length?o[0]._captionSide:null,s=W(t[0].cloneNode(!1)),d=W(t[0].cloneNode(!1)),u=t.children("tfoot"),c="<div/>",f=function(e){return e?Ye(e):null};u.length||(u=null);var h=W(c,{class:r.sScrollWrapper}).append(W(c,{class:r.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:a?f(a):"100%"}).append(W(c,{class:r.sScrollHeadInner}).css({"box-sizing":"content-box",width:n.sXInner||"100%"}).append(s.removeAttr("id").css("margin-left",0).append("top"===l?o:null).append(t.children("thead"))))).append(W(c,{class:r.sScrollBody}).css({position:"relative",overflow:"auto",width:f(a)}).append(t));u&&h.append(W(c,{class:r.sScrollFoot}).css({overflow:"hidden",border:0,width:a?f(a):"100%"}).append(W(c,{class:r.sScrollFootInner}).append(d.removeAttr("id").css("margin-left",0).append("bottom"===l?o:null).append(t.children("tfoot")))));var p=h.children(),m=p[0],T=p[1],g=u?p[2]:null;return a&&W(T).on("scroll.DT",function(e){var t=this.scrollLeft;m.scrollLeft=t,u&&(g.scrollLeft=t)}),W(T).css(i&&n.bCollapse?"max-height":"height",i),e.nScrollHead=m,e.nScrollBody=T,e.nScrollFoot=g,e.aoDrawCallback.push({fn:He,sName:"scrolling"}),h[0]}function He(n){var e,t,a,i,r,o,l,s,d,u=n.oScroll,c=u.sX,f=u.sXInner,h=u.sY,p=u.iBarWidth,m=W(n.nScrollHead),T=m[0].style,g=m.children("div"),_=g[0].style,b=g.children("table"),C=n.nScrollBody,y=W(C),D=C.style,v=W(n.nScrollFoot).children("div"),S=v.children("table"),I=W(n.nTHead),w=W(n.nTable),R=w[0],E=R.style,F=n.nTFoot?W(n.nTFoot):null,x=n.oBrowser,L=x.bScrollOversize,N=k(n.aoColumns,"nTh"),P=[],B=[],O=[],V=[],A=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},U=C.scrollHeight>C.clientHeight;if(n.scrollBarVis!==U&&n.scrollBarVis!==G)return n.scrollBarVis=U,void j(n);n.scrollBarVis=U,w.children("thead, tfoot").remove(),F&&(o=F.clone().prependTo(w),t=F.find("tr"),i=o.find("tr")),r=I.clone().prependTo(w),e=I.find("tr"),a=r.find("tr"),r.find("th, td").removeAttr("tabindex"),c||(D.width="100%",m[0].style.width="100%"),W.each(ce(n,r),function(e,t){l=q(n,e),t.style.width=n.aoColumns[l].sWidth}),F&&We(function(e){e.style.width=""},i),d=w.outerWidth(),""===c?(E.width="100%",L&&(w.find("tbody").height()>C.offsetHeight||"scroll"==y.css("overflow-y"))&&(E.width=Ye(w.outerWidth()-p)),d=w.outerWidth()):""!==f&&(E.width=Ye(f),d=w.outerWidth()),We(A,a),We(function(e){O.push(e.innerHTML),P.push(Ye(W(e).css("width")))},a),We(function(e,t){-1!==W.inArray(e,N)&&(e.style.width=P[t])},e),W(a).height(0),F&&(We(A,i),We(function(e){V.push(e.innerHTML),B.push(Ye(W(e).css("width")))},i),We(function(e,t){e.style.width=B[t]},t),W(i).height(0)),We(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+O[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=P[t]},a),F&&We(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+V[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=B[t]},i),w.outerWidth()<d?(s=C.scrollHeight>C.offsetHeight||"scroll"==y.css("overflow-y")?d+p:d,L&&(C.scrollHeight>C.offsetHeight||"scroll"==y.css("overflow-y"))&&(E.width=Ye(s-p)),""!==c&&""===f||ot(n,1,"Possible column misalignment",6)):s="100%",D.width=Ye(s),T.width=Ye(s),F&&(n.nScrollFoot.style.width=Ye(s)),h||L&&(D.height=Ye(R.offsetHeight+p));var M=w.outerWidth();b[0].style.width=Ye(M),_.width=Ye(M);var $=w.height()>C.clientHeight||"scroll"==y.css("overflow-y"),H="padding"+(x.bScrollbarLeft?"Left":"Right");_[H]=$?p+"px":"0px",F&&(S[0].style.width=Ye(M),v[0].style.width=Ye(M),v[0].style[H]=$?p+"px":"0px"),w.children("colgroup").insertBefore(w.children("thead")),y.scroll(),!n.bSorted&&!n.bFiltered||n._drawHold||(C.scrollTop=0)}function We(e,t,n){for(var a,i,r=0,o=0,l=t.length;o<l;){for(a=t[o].firstChild,i=n?n[o].firstChild:null;a;)1===a.nodeType&&(n?e(a,i,r):e(a,r),r++),a=a.nextSibling,i=n?i.nextSibling:null;o++}}var Ge=/<.*?>/g;function ke(e){var t,n,a,i=e.nTable,r=e.aoColumns,o=e.oScroll,l=o.sY,s=o.sX,d=o.sXInner,u=r.length,c=A(e,"bVisible"),f=W("th",e.nTHead),h=i.getAttribute("width"),p=i.parentNode,m=!1,T=e.oBrowser,g=T.bScrollOversize,_=i.style.width;for(_&&-1!==_.indexOf("%")&&(h=_),t=0;t<c.length;t++)null!==(n=r[c[t]]).sWidth&&(n.sWidth=qe(n.sWidthOrig,p),m=!0);if(g||!m&&!s&&!l&&u==V(e)&&u==f.length)for(t=0;t<u;t++){var b=q(e,t);null!==b&&(r[b].sWidth=Ye(f.eq(t).width()))}else{var C=W(i).clone().css("visibility","hidden").removeAttr("id");C.find("tbody tr").remove();var y=W("<tr/>").appendTo(C.find("tbody"));for(C.find("thead, tfoot").remove(),C.append(W(e.nTHead).clone()).append(W(e.nTFoot).clone()),C.find("tfoot th, tfoot td").css("width",""),f=ce(e,C.find("thead")[0]),t=0;t<c.length;t++)n=r[c[t]],f[t].style.width=null!==n.sWidthOrig&&""!==n.sWidthOrig?Ye(n.sWidthOrig):"",n.sWidthOrig&&s&&W(f[t]).append(W("<div/>").css({width:n.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(e.aoData.length)for(t=0;t<c.length;t++)n=r[a=c[t]],W(Je(e,a)).clone(!1).append(n.sContentPadding).appendTo(y);W("[name]",C).removeAttr("name");var D=W("<div/>").css(s||l?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(C).appendTo(p);s&&d?C.width(d):s?(C.css("width","auto"),C.removeAttr("width"),C.width()<p.clientWidth&&h&&C.width(p.clientWidth)):l?C.width(p.clientWidth):h&&C.width(h);var v=0;for(t=0;t<c.length;t++){var S=W(f[t]),I=S.outerWidth()-S.width(),w=T.bBounding?Math.ceil(f[t].getBoundingClientRect().width):S.outerWidth();v+=w,r[c[t]].sWidth=Ye(w-I)}i.style.width=Ye(v),D.remove()}if(h&&(i.style.width=Ye(h)),(h||s)&&!e._reszEvt){var R=function(){W(E).on("resize.DT-"+e.sInstance,je(function(){j(e)}))};g?setTimeout(R,1e3):R(),e._reszEvt=!0}}var je=b.util.throttle;function qe(e,t){if(!e)return 0;var n=W("<div/>").css("width",Ye(e)).appendTo(t||g.body),a=n[0].offsetWidth;return n.remove(),a}function Je(e,t){var n=ze(e,t);if(n<0)return null;var a=e.aoData[n];return a.nTr?a.anCells[t]:W("<td/>").html(R(e,n,t,"display"))[0]}function ze(e,t){for(var n,a=-1,i=-1,r=0,o=e.aoData.length;r<o;r++)(n=(n=(n=R(e,r,t,"display")+"").replace(Ge,"")).replace(/&nbsp;/g," ")).length>a&&(a=n.length,i=r);return i}function Ye(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function Xe(e){var t,n,a,i,r,o,l,s=[],d=e.aoColumns,u=e.aaSortingFixed,c=W.isPlainObject(u),f=[],h=function(e){e.length&&!W.isArray(e[0])?f.push(e):W.merge(f,e)};for(W.isArray(u)&&h(u),c&&u.pre&&h(u.pre),h(e.aaSorting),c&&u.post&&h(u.post),t=0;t<f.length;t++)for(n=0,a=(i=d[l=f[t][0]].aDataSort).length;n<a;n++)o=d[r=i[n]].sType||"string",f[t]._idx===G&&(f[t]._idx=W.inArray(f[t][1],d[r].asSorting)),s.push({src:l,col:r,dir:f[t][1],index:f[t]._idx,type:o,formatter:b.ext.type.order[o+"-pre"]});return s}function Ke(e){var t,n,a,i,u,c=[],f=b.ext.type.order,h=e.aoData,r=(e.aoColumns,0),o=e.aiDisplayMaster;for(w(e),t=0,n=(u=Xe(e)).length;t<n;t++)(i=u[t]).formatter&&r++,nt(e,i.col);if("ssp"!=pt(e)&&0!==u.length){for(t=0,a=o.length;t<a;t++)c[o[t]]=t;r===u.length?o.sort(function(e,t){var n,a,i,r,o,l=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<l;i++)if(0!==(r=(n=s[(o=u[i]).col])<(a=d[o.col])?-1:a<n?1:0))return"asc"===o.dir?r:-r;return(n=c[e])<(a=c[t])?-1:a<n?1:0}):o.sort(function(e,t){var n,a,i,r,o,l=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<l;i++)if(n=s[(o=u[i]).col],a=d[o.col],0!==(r=(f[o.type+"-"+o.dir]||f["string-"+o.dir])(n,a)))return r;return(n=c[e])<(a=c[t])?-1:a<n?1:0})}e.bSorted=!0}function Qe(e){for(var t,n=e.aoColumns,a=Xe(e),i=e.oLanguage.oAria,r=0,o=n.length;r<o;r++){var l=n[r],s=l.asSorting,d=l.sTitle.replace(/<.*?>/g,""),u=l.nTh;u.removeAttribute("aria-sort"),t=l.bSortable?d+("asc"===(0<a.length&&a[0].col==r?(u.setAttribute("aria-sort","asc"==a[0].dir?"ascending":"descending"),s[a[0].index+1]||s[0]):s[0])?i.sSortAscending:i.sSortDescending):d,u.setAttribute("aria-label",t)}}function Ze(e,t,n,a){var i,r=e.aoColumns[t],o=e.aaSorting,l=r.asSorting,s=function(e,t){var n=e._idx;return n===G&&(n=W.inArray(e[1],l)),n+1<l.length?n+1:t?null:0};if("number"==typeof o[0]&&(o=e.aaSorting=[o]),n&&e.oFeatures.bSortMulti){var d=W.inArray(t,k(o,"0"));-1!==d?(null===(i=s(o[d],!0))&&1===o.length&&(i=0),null===i?o.splice(d,1):(o[d][1]=l[i],o[d]._idx=i)):(o.push([t,l[0],0]),o[o.length-1]._idx=0)}else o.length&&o[0][0]==t?(i=s(o[0]),o.length=1,o[0][1]=l[i],o[0]._idx=i):(o.length=0,o.push([t,l[0]]),o[0]._idx=0);se(e),"function"==typeof a&&a(e)}function et(t,e,n,a){var i=t.aoColumns[n];dt(e,{},function(e){!1!==i.bSortable&&(t.oFeatures.bProcessing?(Me(t,!0),setTimeout(function(){Ze(t,n,e.shiftKey,a),"ssp"!==pt(t)&&Me(t,!1)},0)):Ze(t,n,e.shiftKey,a))})}function tt(e){var t,n,a,i=e.aLastSort,r=e.oClasses.sSortColumn,o=Xe(e),l=e.oFeatures;if(l.bSort&&l.bSortClasses){for(t=0,n=i.length;t<n;t++)a=i[t].src,W(k(e.aoData,"anCells",a)).removeClass(r+(t<2?t+1:3));for(t=0,n=o.length;t<n;t++)a=o[t].src,W(k(e.aoData,"anCells",a)).addClass(r+(t<2?t+1:3))}e.aLastSort=o}function nt(e,t){var n,a,i,r=e.aoColumns[t],o=b.ext.order[r.sSortDataType];o&&(n=o.call(e.oInstance,e,t,I(e,t)));for(var l=b.ext.type.order[r.sType+"-pre"],s=0,d=e.aoData.length;s<d;s++)(a=e.aoData[s])._aSortData||(a._aSortData=[]),a._aSortData[t]&&!o||(i=o?n[s]:R(e,s,t,"sort"),a._aSortData[t]=l?l(i):i)}function at(n){if(n.oFeatures.bStateSave&&!n.bDestroying){var e={time:+new Date,start:n._iDisplayStart,length:n._iDisplayLength,order:W.extend(!0,[],n.aaSorting),search:Re(n.oPreviousSearch),columns:W.map(n.aoColumns,function(e,t){return{visible:e.bVisible,search:Re(n.aoPreSearchCols[t])}})};ct(n,"aoStateSaveParams","stateSaveParams",[n,e]),n.oSavedState=e,n.fnStateSaveCallback.call(n.oInstance,n,e)}}function it(i,e,r){var o,l,s=i.aoColumns,t=function(e){if(e&&e.time){var t=ct(i,"aoStateLoadParams","stateLoadParams",[i,e]);if(-1===W.inArray(!1,t)){var n=i.iStateDuration;if(0<n&&e.time<+new Date-1e3*n)r();else if(e.columns&&s.length!==e.columns.length)r();else{if(i.oLoadedState=W.extend(!0,{},e),e.start!==G&&(i._iDisplayStart=e.start,i.iInitDisplayStart=e.start),e.length!==G&&(i._iDisplayLength=e.length),e.order!==G&&(i.aaSorting=[],W.each(e.order,function(e,t){i.aaSorting.push(t[0]>=s.length?[0,t[1]]:t)})),e.search!==G&&W.extend(i.oPreviousSearch,Ee(e.search)),e.columns)for(o=0,l=e.columns.length;o<l;o++){var a=e.columns[o];a.visible!==G&&(s[o].bVisible=a.visible),a.search!==G&&W.extend(i.aoPreSearchCols[o],Ee(a.search))}ct(i,"aoStateLoaded","stateLoaded",[i,e]),r()}}else r()}else r()};if(i.oFeatures.bStateSave){var n=i.fnStateLoadCallback.call(i.oInstance,i,t);n!==G&&t(n)}else r()}function rt(e){var t=b.settings,n=W.inArray(e,k(t,"nTable"));return-1!==n?t[n]:null}function ot(e,t,n,a){if(n="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+n,a&&(n+=". For more information about this error, please see http://datatables.net/tn/"+a),t)E.console&&console.log&&console.log(n);else{var i=b.ext,r=i.sErrMode||i.errMode;if(e&&ct(e,null,"error",[e,a,n]),"alert"==r)alert(n);else{if("throw"==r)throw new Error(n);"function"==typeof r&&r(e,a,n)}}}function lt(n,a,e,t){W.isArray(e)?W.each(e,function(e,t){W.isArray(t)?lt(n,a,t[0],t[1]):lt(n,a,t)}):(t===G&&(t=e),a[e]!==G&&(n[t]=a[e]))}function st(e,t,n){var a;for(var i in t)t.hasOwnProperty(i)&&(a=t[i],W.isPlainObject(a)?(W.isPlainObject(e[i])||(e[i]={}),W.extend(!0,e[i],a)):n&&"data"!==i&&"aaData"!==i&&W.isArray(a)?e[i]=a.slice():e[i]=a);return e}function dt(t,e,n){W(t).on("click.DT",e,function(e){W(t).blur(),n(e)}).on("keypress.DT",e,function(e){13===e.which&&(e.preventDefault(),n(e))}).on("selectstart.DT",function(){return!1})}function ut(e,t,n,a){n&&e[t].push({fn:n,sName:a})}function ct(n,e,t,a){var i=[];if(e&&(i=W.map(n[e].slice().reverse(),function(e,t){return e.fn.apply(n.oInstance,a)})),null!==t){var r=W.Event(t+".dt");W(n.nTable).trigger(r,a),i.push(r.result)}return i}function ft(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),a=e._iDisplayLength;n<=t&&(t=n-a),t-=t%a,(-1===a||t<0)&&(t=0),e._iDisplayStart=t}function ht(e,t){var n=e.renderer,a=b.ext.renderer[t];return W.isPlainObject(n)&&n[t]?a[n[t]]||a._:"string"==typeof n&&a[n]||a._}function pt(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}var mt=[],Tt=Array.prototype;_=function(e,t){if(!(this instanceof _))return new _(e,t);var l=[],n=function(e){var t,n,a,i,r,o=(t=e,i=b.settings,r=W.map(i,function(e,t){return e.nTable}),t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?-1!==(n=W.inArray(t,r))?[i[n]]:null:t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?a=W(t):t instanceof W&&(a=t),a?a.map(function(e){return-1!==(n=W.inArray(this,r))?i[n]:null}).toArray():void 0):[]);o&&(l=l.concat(o))};if(W.isArray(e))for(var a=0,i=e.length;a<i;a++)n(e[a]);else n(e);this.context=T(l),t&&W.merge(this,t),this.selector={rows:null,cols:null,opts:null},_.extend(this,this,mt)},b.Api=_,W.extend(_.prototype,{any:function(){return 0!==this.count()},concat:Tt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new _(t[e],this[e]):null},filter:function(e){var t=[];if(Tt.filter)t=Tt.filter.call(this,e,this);else for(var n=0,a=this.length;n<a;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new _(this.context,t)},flatten:function(){var e=[];return new _(this.context,e.concat.apply(e,this.toArray()))},join:Tt.join,indexOf:Tt.indexOf||function(e,t){for(var n=t||0,a=this.length;n<a;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,a){var i,r,o,l,s,d,u,c,f=[],h=this.context,p=this.selector;for("string"==typeof e&&(a=n,n=t,t=e,e=!1),r=0,o=h.length;r<o;r++){var m=new _(h[r]);if("table"===t)(i=n.call(m,h[r],r))!==G&&f.push(i);else if("columns"===t||"rows"===t)(i=n.call(m,h[r],this[r],r))!==G&&f.push(i);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(u=this[r],"column-rows"===t&&(d=yt(h[r],p.opts)),l=0,s=u.length;l<s;l++)c=u[l],(i="cell"===t?n.call(m,h[r],c.row,c.column,r,l):n.call(m,h[r],c,r,l,d))!==G&&f.push(i)}if(f.length||a){var T=new _(h,e?f.concat.apply([],f):f),g=T.selector;return g.rows=p.rows,g.cols=p.cols,g.opts=p.opts,T}return this},lastIndexOf:Tt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Tt.map)t=Tt.map.call(this,e,this);else for(var n=0,a=this.length;n<a;n++)t.push(e.call(this,this[n],n));return new _(this.context,t)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Tt.pop,push:Tt.push,reduce:Tt.reduce||function(e,t){return S(this,e,t,0,this.length,1)},reduceRight:Tt.reduceRight||function(e,t){return S(this,e,t,this.length-1,-1,-1)},reverse:Tt.reverse,selector:null,shift:Tt.shift,slice:function(){return new _(this.context,this)},sort:Tt.sort,splice:Tt.splice,toArray:function(){return Tt.slice.call(this)},to$:function(){return W(this)},toJQuery:function(){return W(this)},unique:function(){return new _(this.context,T(this))},unshift:Tt.unshift}),_.extend=function(e,t,n){if(n.length&&t&&(t instanceof _||t.__dt_wrapper)){var a,i,r,o=function(t,n,a){return function(){var e=n.apply(t,arguments);return _.extend(e,e,a.methodExt),e}};for(a=0,i=n.length;a<i;a++)t[(r=n[a]).name]="function"==typeof r.val?o(e,r.val,r):W.isPlainObject(r.val)?{}:r.val,t[r.name].__dt_wrapper=!0,_.extend(e,t[r.name],r.propExt)}},_.register=t=function(e,t){if(W.isArray(e))for(var n=0,a=e.length;n<a;n++)_.register(e[n],t);else{var i,r,o,l,s=e.split("."),d=mt,u=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n].name===t)return e[n];return null};for(i=0,r=s.length;i<r;i++){var c=u(d,o=(l=-1!==s[i].indexOf("()"))?s[i].replace("()",""):s[i]);c||(c={name:o,val:{},methodExt:[],propExt:[]},d.push(c)),i===r-1?c.val=t:d=l?c.methodExt:c.propExt}}},_.registerPlural=e=function(e,t,n){_.register(e,n),_.register(t,function(){var e=n.apply(this,arguments);return e===this?this:e instanceof _?e.length?W.isArray(e[0])?new _(e.context,e[0]):e[0]:G:e})};t("tables()",function(e){return e?new _(function(e,n){if("number"==typeof e)return[n[e]];var a=W.map(n,function(e,t){return e.nTable});return W(a).filter(e).map(function(e){var t=W.inArray(this,a);return n[t]}).toArray()}(e,this.context)):this}),t("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new _(n[0]):t}),e("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),e("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),e("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),e("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),e("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),t("draw()",function(t){return this.iterator("table",function(e){"page"===t?le(e):("string"==typeof t&&(t="full-hold"!==t),se(e,!1===t))})}),t("page()",function(t){return t===G?this.page.info().page:this.iterator("table",function(e){Ae(e,t)})}),t("page.info()",function(e){if(0===this.context.length)return G;var t=this.context[0],n=t._iDisplayStart,a=t.oFeatures.bPaginate?t._iDisplayLength:-1,i=t.fnRecordsDisplay(),r=-1===a;return{page:r?0:Math.floor(n/a),pages:r?1:Math.ceil(i/a),start:n,end:t.fnDisplayEnd(),length:a,recordsTotal:t.fnRecordsTotal(),recordsDisplay:i,serverSide:"ssp"===pt(t)}}),t("page.len()",function(t){return t===G?0!==this.context.length?this.context[0]._iDisplayLength:G:this.iterator("table",function(e){Be(e,t)})});var gt=function(i,r,e){if(e){var t=new _(i);t.one("draw",function(){e(t.ajax.json())})}if("ssp"==pt(i))se(i,r);else{Me(i,!0);var n=i.jqXHR;n&&4!==n.readyState&&n.abort(),fe(i,[],function(e){Z(i);for(var t=Te(i,e),n=0,a=t.length;n<a;n++)M(i,t[n]);se(i,r),Me(i,!1)})}};t("ajax.json()",function(){var e=this.context;if(0<e.length)return e[0].json}),t("ajax.params()",function(){var e=this.context;if(0<e.length)return e[0].oAjaxData}),t("ajax.reload()",function(t,n){return this.iterator("table",function(e){gt(e,!1===n,t)})}),t("ajax.url()",function(t){var e=this.context;return t===G?0===e.length?G:(e=e[0]).ajax?W.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource:this.iterator("table",function(e){W.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),t("ajax.url().load()",function(t,n){return this.iterator("table",function(e){gt(e,!1===n,t)})});var _t=function(e,t,n,a,i){var r,o,l,s,d,u,c=[],f=_typeof(t);for(t&&"string"!==f&&"function"!==f&&t.length!==G||(t=[t]),l=0,s=t.length;l<s;l++)for(d=0,u=(o=t[l]&&t[l].split&&!t[l].match(/[\[\(:]/)?t[l].split(","):[t[l]]).length;d<u;d++)(r=n("string"==typeof o[d]?W.trim(o[d]):o[d]))&&r.length&&(c=c.concat(r));var h=p.selector[e];if(h.length)for(l=0,s=h.length;l<s;l++)c=h[l](a,i,c);return T(c)},bt=function(e){return e||(e={}),e.filter&&e.search===G&&(e.search=e.filter),W.extend({search:"none",order:"current",page:"all"},e)},Ct=function(e){for(var t=0,n=e.length;t<n;t++)if(0<e[t].length)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},yt=function(e,t){var n,a=[],i=e.aiDisplay,r=e.aiDisplayMaster,o=t.search,l=t.order,s=t.page;if("ssp"==pt(e))return"removed"===o?[]:m(0,r.length);if("current"==s)for(u=e._iDisplayStart,c=e.fnDisplayEnd();u<c;u++)a.push(i[u]);else if("current"==l||"applied"==l){if("none"==o)a=r.slice();else if("applied"==o)a=i.slice();else if("removed"==o){for(var d={},u=0,c=i.length;u<c;u++)d[i[u]]=null;a=W.map(r,function(e){return d.hasOwnProperty(e)?null:e})}}else if("index"==l||"original"==l)for(u=0,c=e.aoData.length;u<c;u++)"none"==o?a.push(u):(-1===(n=W.inArray(u,i))&&"removed"==o||0<=n&&"applied"==o)&&a.push(u);return a};t("rows()",function(t,n){t===G?t="":W.isPlainObject(t)&&(n=t,t=""),n=bt(n);var e=this.iterator("table",function(e){return _t("row",t,function(n){var e=h(n),a=s.aoData;if(null!==e&&!d)return[e];if(u||(u=yt(s,d)),null!==e&&-1!==W.inArray(e,u))return[e];if(null===n||n===G||""===n)return u;if("function"==typeof n)return W.map(u,function(e){var t=a[e];return n(e,t._aData,t.nTr)?e:null});if(n.nodeName){var t=n._DT_RowIndex,i=n._DT_CellIndex;if(t!==G)return a[t]&&a[t].nTr===n?[t]:[];if(i)return a[i.row]&&a[i.row].nTr===n?[i.row]:[];var r=W(n).closest("*[data-dt-row]");return r.length?[r.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var o=s.aIds[n.replace(/^#/,"")];if(o!==G)return[o.idx]}var l=y(C(s.aoData,u,"nTr"));return W(l).filter(n).map(function(){return this._DT_RowIndex}).toArray()},s=e,d=n);var s,d,u},1);return e.selector.rows=t,e.selector.opts=n,e}),t("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||G},1)}),t("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return C(e.aoData,t,"_aData")},1)}),e("rows().cache()","row().cache()",function(a){return this.iterator("row",function(e,t){var n=e.aoData[t];return"search"===a?n._aFilterData:n._aSortData},1)}),e("rows().invalidate()","row().invalidate()",function(n){return this.iterator("row",function(e,t){te(e,t,n)})}),e("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),e("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,a=0,i=n.length;a<i;a++)for(var r=0,o=this[a].length;r<o;r++){var l=n[a].rowIdFn(n[a].aoData[this[a][r]]._aData);t.push((!0===e?"#":"")+l)}return new _(n,t)}),e("rows().remove()","row().remove()",function(){var f=this;return this.iterator("row",function(e,t,n){var a,i,r,o,l,s,d=e.aoData,u=d[t];for(d.splice(t,1),a=0,i=d.length;a<i;a++)if(s=(l=d[a]).anCells,null!==l.nTr&&(l.nTr._DT_RowIndex=a),null!==s)for(r=0,o=s.length;r<o;r++)s[r]._DT_CellIndex.row=a;ee(e.aiDisplayMaster,t),ee(e.aiDisplay,t),ee(f[n],t,!1),0<e._iRecordsDisplay&&e._iRecordsDisplay--,ft(e);var c=e.rowIdFn(u._aData);c!==G&&delete e.aIds[c]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),t("rows.add()",function(r){var e=this.iterator("table",function(e){var t,n,a,i=[];for(n=0,a=r.length;n<a;n++)(t=r[n]).nodeName&&"TR"===t.nodeName.toUpperCase()?i.push($(e,t)[0]):i.push(M(e,t));return i},1),t=this.rows(-1);return t.pop(),W.merge(t,e),t}),t("row()",function(e,t){return Ct(this.rows(e,t))}),t("row().data()",function(e){var t=this.context;if(e===G)return t.length&&this.length?t[0].aoData[this[0]]._aData:G;var n=t[0].aoData[this[0]];return n._aData=e,W.isArray(e)&&n.nTr.id&&K(t[0].rowId)(e,n.nTr.id),te(t[0],this[0],"data"),this}),t("row().node()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]].nTr||null}),t("row.add()",function(t){t instanceof W&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?$(e,t)[0]:M(e,t)});return this.row(e[0])});var Dt=function(e,t){var n=e.context;if(n.length){var a=n[0].aoData[t!==G?t:e[0]];a&&a._details&&(a._details.remove(),a._detailsShow=G,a._details=G)}},vt=function(e,t){var n=e.context;if(n.length&&e.length){var a=n[0].aoData[e[0]];a._details&&((a._detailsShow=t)?a._details.insertAfter(a.nTr):a._details.detach(),St(n[0]))}},St=function(s){var i=new _(s),e=".dt.DT_details",t="draw"+e,n="column-visibility"+e,a="destroy"+e,d=s.aoData;i.off(t+" "+n+" "+a),0<k(d,"_details").length&&(i.on(t,function(e,t){s===t&&i.rows({page:"current"}).eq(0).each(function(e){var t=d[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),i.on(n,function(e,t,n,a){if(s===t)for(var i,r=V(t),o=0,l=d.length;o<l;o++)(i=d[o])._details&&i._details.children("td[colspan]").attr("colspan",r)}),i.on(a,function(e,t){if(s===t)for(var n=0,a=d.length;n<a;n++)d[n]._details&&Dt(i,n)}))},It="row().child",wt=It+"()";t(wt,function(e,t){var o,n,l,a=this.context;return e===G?a.length&&this.length?a[0].aoData[this[0]]._details:G:(!0===e?this.child.show():!1===e?Dt(this):a.length&&this.length&&(o=a[0],n=a[0].aoData[this[0]],l=[],function e(t,n){if(W.isArray(t)||t instanceof W)for(var a=0,i=t.length;a<i;a++)e(t[a],n);else if(t.nodeName&&"tr"===t.nodeName.toLowerCase())l.push(t);else{var r=W("<tr><td/></tr>").addClass(n);W("td",r).addClass(n).html(t)[0].colSpan=V(o),l.push(r[0])}}(e,t),n._details&&n._details.detach(),n._details=W(l),n._detailsShow&&n._details.insertAfter(n.nTr)),this)}),t([It+".show()",wt+".show()"],function(e){return vt(this,!0),this}),t([It+".hide()",wt+".hide()"],function(){return vt(this,!1),this}),t([It+".remove()",wt+".remove()"],function(){return Dt(this),this}),t(It+".isShown()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]]._detailsShow||!1});var Rt=/^([^:]+):(name|visIdx|visible)$/,Et=function(e,t,n,a,i){for(var r=[],o=0,l=i.length;o<l;o++)r.push(R(e,i[o],t));return r};t("columns()",function(n,a){n===G?n="":W.isPlainObject(n)&&(a=n,n=""),a=bt(a);var e=this.iterator("table",function(e){return t=n,d=a,u=(s=e).aoColumns,c=k(u,"sName"),f=k(u,"nTh"),_t("column",t,function(n){var e=h(n);if(""===n)return m(u.length);if(null!==e)return[0<=e?e:u.length+e];if("function"==typeof n){var a=yt(s,d);return W.map(u,function(e,t){return n(t,Et(s,t,0,0,a),f[t])?t:null})}var i="string"==typeof n?n.match(Rt):"";if(i)switch(i[2]){case"visIdx":case"visible":var t=parseInt(i[1],10);if(t<0){var r=W.map(u,function(e,t){return e.bVisible?t:null});return[r[r.length+t]]}return[q(s,t)];case"name":return W.map(c,function(e,t){return e===i[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var o=W(f).filter(n).map(function(){return W.inArray(this,f)}).toArray();if(o.length||!n.nodeName)return o;var l=W(n).closest("*[data-dt-column]");return l.length?[l.data("dt-column")]:[]},s,d);var s,t,d,u,c,f},1);return e.selector.cols=n,e.selector.opts=a,e}),e("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),e("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),e("columns().data()","column().data()",function(){return this.iterator("column-rows",Et,1)}),e("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),e("columns().cache()","column().cache()",function(r){return this.iterator("column-rows",function(e,t,n,a,i){return C(e.aoData,i,"search"===r?"_aFilterData":"_aSortData",t)},1)}),e("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,a,i){return C(e.aoData,i,"anCells",t)},1)}),e("columns().visible()","column().visible()",function(n,a){var e=this.iterator("column",function(e,t){if(n===G)return e.aoColumns[t].bVisible;!function(e,t,n){var a,i,r,o,l=e.aoColumns,s=l[t],d=e.aoData;if(n===G)return s.bVisible;if(s.bVisible!==n){if(n){var u=W.inArray(!0,k(l,"bVisible"),t+1);for(i=0,r=d.length;i<r;i++)o=d[i].nTr,a=d[i].anCells,o&&o.insertBefore(a[t],a[u]||null)}else W(k(e.aoData,"anCells",t)).detach();s.bVisible=n,oe(e,e.aoHeader),oe(e,e.aoFooter),e.aiDisplay.length||W(e.nTBody).find("td[colspan]").attr("colspan",V(e)),at(e)}}(e,t,n)});return n!==G&&(this.iterator("column",function(e,t){ct(e,null,"column-visibility",[e,t,n,a])}),(a===G||a)&&this.columns.adjust()),e}),e("columns().indexes()","column().index()",function(n){return this.iterator("column",function(e,t){return"visible"===n?I(e,t):t},1)}),t("columns.adjust()",function(){return this.iterator("table",function(e){j(e)},1)}),t("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return q(n,t);if("fromData"===e||"toVisible"===e)return I(n,t)}}),t("column()",function(e,t){return Ct(this.columns(e,t))});t("cells()",function(T,e,g){if(W.isPlainObject(T)&&(T.row===G?(g=T,T=null):(g=e,e=null)),W.isPlainObject(e)&&(g=e,e=null),null===e||e===G)return this.iterator("table",function(e){return a=e,t=T,n=bt(g),c=a.aoData,f=yt(a,n),h=y(C(c,f,"anCells")),p=W([].concat.apply([],h)),m=a.aoColumns.length,_t("cell",t,function(e){var t="function"==typeof e;if(null===e||e===G||t){for(r=[],o=0,l=f.length;o<l;o++)for(i=f[o],s=0;s<m;s++)d={row:i,column:s},t?(u=c[i],e(d,R(a,i,s),u.anCells?u.anCells[s]:null)&&r.push(d)):r.push(d);return r}if(W.isPlainObject(e))return e.column!==G&&e.row!==G&&-1!==W.inArray(e.row,f)?[e]:[];var n=p.filter(e).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return n.length||!e.nodeName?n:(u=W(e).closest("*[data-dt-row]")).length?[{row:u.data("dt-row"),column:u.data("dt-column")}]:[]},a,n);var a,t,n,i,r,o,l,s,d,u,c,f,h,p,m});var n,a,i,r,o,l=this.columns(e),s=this.rows(T);this.iterator("table",function(e,t){for(n=[],a=0,i=s[t].length;a<i;a++)for(r=0,o=l[t].length;r<o;r++)n.push({row:s[t][a],column:l[t][r]})},1);var t=this.cells(n,g);return W.extend(t.selector,{cols:e,rows:T,opts:g}),t}),e("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var a=e.aoData[t];return a&&a.anCells?a.anCells[n]:G},1)}),t("cells().data()",function(){return this.iterator("cell",function(e,t,n){return R(e,t,n)},1)}),e("cells().cache()","cell().cache()",function(a){return a="search"===a?"_aFilterData":"_aSortData",this.iterator("cell",function(e,t,n){return e.aoData[t][a][n]},1)}),e("cells().render()","cell().render()",function(a){return this.iterator("cell",function(e,t,n){return R(e,t,n,a)},1)}),e("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:I(e,n)}},1)}),e("cells().invalidate()","cell().invalidate()",function(a){return this.iterator("cell",function(e,t,n){te(e,t,a,n)})}),t("cell()",function(e,t,n){return Ct(this.cells(e,t,n))}),t("cell().data()",function(e){var t=this.context,n=this[0];return e===G?t.length&&n.length?R(t[0],n[0].row,n[0].column):G:(H(t[0],n[0].row,n[0].column,e),te(t[0],n[0].row,"data",n[0].column),this)}),t("order()",function(t,e){var n=this.context;return t===G?0!==n.length?n[0].aaSorting:G:("number"==typeof t?t=[[t,e]]:t.length&&!W.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),t("order.listener()",function(t,n,a){return this.iterator("table",function(e){et(e,t,n,a)})}),t("order.fixed()",function(t){if(t)return this.iterator("table",function(e){e.aaSortingFixed=W.extend(!0,{},t)});var e=this.context,n=e.length?e[0].aaSortingFixed:G;return W.isArray(n)?{pre:n}:n}),t(["columns().order()","column().order()"],function(a){var i=this;return this.iterator("table",function(e,t){var n=[];W.each(i[t],function(e,t){n.push([t,a])}),e.aaSorting=n})}),t("search()",function(t,n,a,i){var e=this.context;return t===G?0!==e.length?e[0].oPreviousSearch.sSearch:G:this.iterator("table",function(e){e.oFeatures.bFilter&&_e(e,W.extend({},e.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===a||a,bCaseInsensitive:null===i||i}),1)})}),e("columns().search()","column().search()",function(a,i,r,o){return this.iterator("column",function(e,t){var n=e.aoPreSearchCols;if(a===G)return n[t].sSearch;e.oFeatures.bFilter&&(W.extend(n[t],{sSearch:a+"",bRegex:null!==i&&i,bSmart:null===r||r,bCaseInsensitive:null===o||o}),_e(e,e.oPreviousSearch,1))})}),t("state()",function(){return this.context.length?this.context[0].oSavedState:null}),t("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),t("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),t("state.save()",function(){return this.iterator("table",function(e){at(e)})}),b.versionCheck=b.fnVersionCheck=function(e){for(var t,n,a=b.version.split("."),i=e.split("."),r=0,o=i.length;r<o;r++)if((t=parseInt(a[r],10)||0)!==(n=parseInt(i[r],10)||0))return n<t;return!0},b.isDataTable=b.fnIsDataTable=function(e){var i=W(e).get(0),r=!1;return e instanceof b.Api||(W.each(b.settings,function(e,t){var n=t.nScrollHead?W("table",t.nScrollHead)[0]:null,a=t.nScrollFoot?W("table",t.nScrollFoot)[0]:null;t.nTable!==i&&n!==i&&a!==i||(r=!0)}),r)},b.tables=b.fnTables=function(t){var e=!1;W.isPlainObject(t)&&(e=t.api,t=t.visible);var n=W.map(b.settings,function(e){if(!t||t&&W(e.nTable).is(":visible"))return e.nTable});return e?new _(n):n},b.camelToHungarian=F,t("$()",function(e,t){var n=this.rows(t).nodes(),a=W(n);return W([].concat(a.filter(e).toArray(),a.find(e).toArray()))}),W.each(["on","one","off"],function(e,n){t(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0]=W.map(e[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var t=W(this.tables().nodes());return t[n].apply(t,e),this})}),t("clear()",function(){return this.iterator("table",function(e){Z(e)})}),t("settings()",function(){return new _(this.context,this.context)}),t("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),t("data()",function(){return this.iterator("table",function(e){return k(e.aoData,"_aData")}).flatten()}),t("destroy()",function(p){return p=p||!1,this.iterator("table",function(t){var n,e=t.nTableWrapper.parentNode,a=t.oClasses,i=t.nTable,r=t.nTBody,o=t.nTHead,l=t.nTFoot,s=W(i),d=W(r),u=W(t.nTableWrapper),c=W.map(t.aoData,function(e){return e.nTr});t.bDestroying=!0,ct(t,"aoDestroyCallback","destroy",[t]),p||new _(t).columns().visible(!0),u.off(".DT").find(":not(tbody *)").off(".DT"),W(E).off(".DT-"+t.sInstance),i!=o.parentNode&&(s.children("thead").detach(),s.append(o)),l&&i!=l.parentNode&&(s.children("tfoot").detach(),s.append(l)),t.aaSorting=[],t.aaSortingFixed=[],tt(t),W(c).removeClass(t.asStripeClasses.join(" ")),W("th, td",o).removeClass(a.sSortable+" "+a.sSortableAsc+" "+a.sSortableDesc+" "+a.sSortableNone),d.children().detach(),d.append(c);var f=p?"remove":"detach";s[f](),u[f](),!p&&e&&(e.insertBefore(i,t.nTableReinsertBefore),s.css("width",t.sDestroyWidth).removeClass(a.sTable),(n=t.asDestroyStripes.length)&&d.children().each(function(e){W(this).addClass(t.asDestroyStripes[e%n])}));var h=W.inArray(t,b.settings);-1!==h&&b.settings.splice(h,1)})}),W.each(["column","row","cell"],function(e,s){t(s+"s().every()",function(r){var o=this.selector.opts,l=this;return this.iterator(s,function(e,t,n,a,i){r.call(l[s](t,"cell"===s?n:o,"cell"===s?o:G),t,n,a,i)})})}),t("i18n()",function(e,t,n){var a=this.context[0],i=X(e)(a.oLanguage);return i===G&&(i=t),n!==G&&W.isPlainObject(i)&&(i=i[n]!==G?i[n]:i._),i.replace("%d",n)}),b.version="1.10.18",b.settings=[],b.models={},b.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},b.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},b.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},b.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(e){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:W.extend({},b.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},D(b.defaults),b.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},D(b.defaults.column),b.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:G,oAjaxData:G,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==pt(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==pt(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,a=this.aiDisplay.length,i=this.oFeatures,r=i.bPaginate;return i.bServerSide?!1===r||-1===e?t+a:Math.min(t+e,this._iRecordsDisplay):!r||a<n||-1===e?a:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},b.ext=p={buttons:{},classes:{},build:"dt/dt-1.10.18",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:b.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:b.version},W.extend(p,{afnFiltering:p.search,aTypes:p.type.detect,ofnSearch:p.type.search,oSort:p.type.order,afnSortData:p.order,aoFeatures:p.feature,oApi:p.internal,oStdClasses:p.classes,oPagination:p.pager}),W.extend(b.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""});var Ft=b.ext.pager;function xt(e,t){var n=[],a=Ft.numbers_length,i=Math.floor(a/2);return t<=a?n=m(0,t):e<=i?((n=m(0,a-2)).push("ellipsis"),n.push(t-1)):(t-1-i<=e?(n=m(t-(a-2),t)).splice(0,0,"ellipsis"):((n=m(e-i+2,e+i-1)).push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis")),n.splice(0,0,0)),n.DT_el="span",n}W.extend(Ft,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[xt(e,t)]},simple_numbers:function(e,t){return["previous",xt(e,t),"next"]},full_numbers:function(e,t){return["first","previous",xt(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",xt(e,t),"last"]},_numbers:xt,numbers_length:7}),W.extend(!0,b.ext.renderer,{pageButton:{_:function(l,e,s,t,d,u){var c,f,n,h=l.oClasses,p=l.oLanguage.oPaginate,m=l.oLanguage.oAria.paginate||{},T=0;try{n=W(e).find(g.activeElement).data("dt-idx")}catch(e){}!function e(t,n){var a,i,r,o=function(e){Ae(l,e.data.action,!0)};for(a=0,i=n.length;a<i;a++)if(r=n[a],W.isArray(r))e(W("<"+(r.DT_el||"div")+"/>").appendTo(t),r);else{switch(c=null,f="",r){case"ellipsis":t.append('<span class="ellipsis">&#x2026;</span>');break;case"first":c=p.sFirst,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"previous":c=p.sPrevious,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"next":c=p.sNext,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;case"last":c=p.sLast,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;default:c=r+1,f=d===r?h.sPageButtonActive:""}null!==c&&(dt(W("<a>",{class:h.sPageButton+" "+f,"aria-controls":l.sTableId,"aria-label":m[r],"data-dt-idx":T,tabindex:l.iTabIndex,id:0===s&&"string"==typeof r?l.sTableId+"_"+r:null}).html(c).appendTo(t),{action:r},o),T++)}}(W(e).empty(),t),n!==G&&W(e).find("[data-dt-idx="+n+"]").focus()}}}),W.extend(b.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return u(e,n)?"num"+n:null},function(e,t){if(e&&!(e instanceof Date)&&!r.test(e))return null;var n=Date.parse(e);return null!==n&&!isNaN(n)||s(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return u(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return c(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return c(e,n,!0)?"html-num-fmt"+n:null},function(e,t){return s(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),W.extend(b.ext.type.search,{html:function(e){return s(e)?e:"string"==typeof e?e.replace(a," ").replace(i,""):""},string:function(e){return s(e)?e:"string"==typeof e?e.replace(a," "):e}});var Lt=function(e,t,n,a){return 0===e||e&&"-"!==e?(t&&(e=d(e,t)),e.replace&&(n&&(e=e.replace(n,"")),a&&(e=e.replace(a,""))),1*e):-1/0};function Nt(n){W.each({num:function(e){return Lt(e,n)},"num-fmt":function(e){return Lt(e,n,l)},"html-num":function(e){return Lt(e,n,i)},"html-num-fmt":function(e){return Lt(e,n,i,l)}},function(e,t){p.type.order[e+n+"-pre"]=t,e.match(/^html\-/)&&(p.type.search[e+n]=p.type.search.html)})}W.extend(p.type.order,{"date-pre":function(e){var t=Date.parse(e);return isNaN(t)?-1/0:t},"html-pre":function(e){return s(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return s(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:t<e?1:0},"string-desc":function(e,t){return e<t?1:t<e?-1:0}}),Nt(""),W.extend(!0,b.ext.renderer,{header:{_:function(r,o,l,s){W(r.nTable).on("order.dt.DT",function(e,t,n,a){if(r===t){var i=l.idx;o.removeClass(l.sSortingClass+" "+s.sSortAsc+" "+s.sSortDesc).addClass("asc"==a[i]?s.sSortAsc:"desc"==a[i]?s.sSortDesc:l.sSortingClass)}})},jqueryui:function(r,o,l,s){W("<div/>").addClass(s.sSortJUIWrapper).append(o.contents()).append(W("<span/>").addClass(s.sSortIcon+" "+l.sSortingClassJUI)).appendTo(o),W(r.nTable).on("order.dt.DT",function(e,t,n,a){if(r===t){var i=l.idx;o.removeClass(s.sSortAsc+" "+s.sSortDesc).addClass("asc"==a[i]?s.sSortAsc:"desc"==a[i]?s.sSortDesc:l.sSortingClass),o.find("span."+s.sSortIcon).removeClass(s.sSortJUIAsc+" "+s.sSortJUIDesc+" "+s.sSortJUI+" "+s.sSortJUIAscAllowed+" "+s.sSortJUIDescAllowed).addClass("asc"==a[i]?s.sSortJUIAsc:"desc"==a[i]?s.sSortJUIDesc:l.sSortingClassJUI)}})}}});var Pt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};function Bt(t){return function(){var e=[rt(this[b.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return b.ext.internal[t].apply(this,e)}}return b.render={number:function(r,o,l,s,d){return{display:function(e){if("number"!=typeof e&&"string"!=typeof e)return e;var t=e<0?"-":"",n=parseFloat(e);if(isNaN(n))return Pt(e);n=n.toFixed(l),e=Math.abs(n);var a=parseInt(e,10),i=l?o+(e-a).toFixed(l).substring(2):"";return t+(s||"")+a.toString().replace(/\B(?=(\d{3})+(?!\d))/g,r)+i+(d||"")}}},text:function(){return{display:Pt}}},W.extend(b.ext.internal,{_fnExternApiFunc:Bt,_fnBuildAjax:fe,_fnAjaxUpdate:he,_fnAjaxParameters:pe,_fnAjaxUpdateDraw:me,_fnAjaxDataSrc:Te,_fnAddColumn:B,_fnColumnOptions:O,_fnAdjustColumnSizing:j,_fnVisibleToColumnIndex:q,_fnColumnIndexToVisible:I,_fnVisbleColumns:V,_fnGetColumns:A,_fnColumnTypes:w,_fnApplyColumnDefs:U,_fnHungarianMap:D,_fnCamelToHungarian:F,_fnLanguageCompat:x,_fnBrowserDetect:P,_fnAddData:M,_fnAddTr:$,_fnNodeToDataIndex:function(e,t){return t._DT_RowIndex!==G?t._DT_RowIndex:null},_fnNodeToColumnIndex:function(e,t,n){return W.inArray(n,e.aoData[t].anCells)},_fnGetCellData:R,_fnSetCellData:H,_fnSplitObjNotation:Y,_fnGetObjectDataFn:X,_fnSetObjectDataFn:K,_fnGetDataMaster:Q,_fnClearTable:Z,_fnDeleteIndex:ee,_fnInvalidate:te,_fnGetRowElements:ne,_fnCreateTr:ae,_fnBuildHead:re,_fnDrawHead:oe,_fnDraw:le,_fnReDraw:se,_fnAddOptionsHtml:de,_fnDetectHeader:ue,_fnGetUniqueThs:ce,_fnFeatureHtmlFilter:ge,_fnFilterComplete:_e,_fnFilterCustom:be,_fnFilterColumn:Ce,_fnFilter:ye,_fnFilterCreateSearch:De,_fnEscapeRegex:ve,_fnFilterData:we,_fnFeatureHtmlInfo:Fe,_fnUpdateInfo:xe,_fnInfoMacros:Le,_fnInitialise:Ne,_fnInitComplete:Pe,_fnLengthChange:Be,_fnFeatureHtmlLength:Oe,_fnFeatureHtmlPaginate:Ve,_fnPageChange:Ae,_fnFeatureHtmlProcessing:Ue,_fnProcessingDisplay:Me,_fnFeatureHtmlTable:$e,_fnScrollDraw:He,_fnApplyToChildren:We,_fnCalculateColumnWidths:ke,_fnThrottle:je,_fnConvertToWidth:qe,_fnGetWidestNode:Je,_fnGetMaxLenString:ze,_fnStringToCss:Ye,_fnSortFlatten:Xe,_fnSort:Ke,_fnSortAria:Qe,_fnSortListener:Ze,_fnSortAttachListener:et,_fnSortingClasses:tt,_fnSortData:nt,_fnSaveState:at,_fnLoadState:it,_fnSettingsFromNode:rt,_fnLog:ot,_fnMap:lt,_fnBindAction:dt,_fnCallbackReg:ut,_fnCallbackFire:ct,_fnLengthOverflow:ft,_fnRenderer:ht,_fnDataSource:pt,_fnRowAttributes:ie,_fnExtend:st,_fnCalculateEnd:function(){}}),((W.fn.dataTable=b).$=W).fn.dataTableSettings=b.settings,W.fn.dataTableExt=b.ext,W.fn.DataTable=function(e){return W(this).dataTable(e).api()},W.each(b,function(e,t){W.fn.DataTable[e]=t}),W.fn.dataTable});var HTMLControlAttrs={JBUILD4DC_CUSTOM:"jbuild4dc_custom",SELECTED_JBUILD4DC_CUSTOM:"[jbuild4dc_custom=true]",CLIENT_RESOLVE:"client_resolve"},HTMLControl={_InstanceMap:{},_GetInstance:function _GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},GetInstance:function(e){return this._GetInstance(e)},SaveControlNewInstanceToPool:function(e,t){return alert("改方法已经废弃,改为服务端创建初始化脚本1!"),null},_SaveControlNewInstanceToPool:function(e,t){return this._InstanceMap[e]=t,e},GetControlInstanceByElem:function(e){return this._GetInstance(this.GetControlInstanceNameByElem(e))},GetControlInstanceNameByElem:function(e){return e.attr("client_instance_name")&&0<e.attr("client_instance_name").length?e.attr("client_instance_name"):e.attr("client_resolve")},RendererChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null,formRuntimeInstance:null,listRuntimeInstance:null},RendererDataChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null,topDataSet:null,formRuntimeInstance:null,listRuntimeInstance:null},RendererChain:function(e){for(var t=e.$singleControlElem,n=0;n<t.children().length;n++)try{var a=$(t.children()[n]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=a).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&a.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r=HTMLControl.GetControlInstanceByElem(a);if("function"==typeof r.Initialize&&r.Initialize(),"Instance"==r._objectType){if(r._prop){var o=HTMLControl.TryBindElementAttrToInstanceProp(a,r._prop);r._prop=o}}else{var l=a.attr("id");if(l&&r._propMap&&r._prop&&!r._propMap[l]){o=HTMLControl.TryBindElementAttrToInstanceProp(a,r._prop);r._propMap[l]=o}}r.RendererChain(i),"function"==typeof r.InitStyle&&r.InitStyle(i),"function"==typeof r.TryBindUrlValue&&r.TryBindUrlValue(i)}else HTMLControl.RendererChain(i)}catch(e){throw"HTMLControl.js.RendererChain:index:"+n+e}},RendererDataChain:function(e){for(var t=e.$singleControlElem,n=0;n<t.children().length;n++)try{var a=$(t.children()[n]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=a).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&a.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r,o=HTMLControl.GetControlInstanceByElem(a);o.RendererDataChain(i),"function"==typeof o.SetValue&&(r=HTMLControl.TryGetFieldPOInRelationFormRecordComplexPo(a,e.relationFormRecordComplexPo),o.SetValue(a,r,e.relationFormRecordComplexPo,e)),e.callToViewStatusFunc&&"function"==typeof o.ToViewStatus&&o.ToViewStatus(a,r,e.relationFormRecordComplexPo,e)}else HTMLControl.RendererDataChain(i)}catch(e){throw"HTMLControl.js.RendererDataChain:index:"+n+e}},InitStyle:function(e){var t=e.$singleControlElem;HTMLControl.TryAppendValidateStyle(t)},TryAppendValidateStyle:function(e){var t=ValidateRulesRuntime.getValidateRules(e);if(t&&0<t.rules.length)for(var n=0;n<t.rules.length;n++)if(t.rules[n].validateType==ValidateRulesRuntime.NoEmpty){var a=e.parent().prev(),i=ValidateRulesRuntime.getValidateTipElem()+a.text();a.html(i)}},GetValue:function(e,t,n){return t.value=e.val(),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value))},ToViewStatus:function(e,t,n,a){var i=BaseUtility.GetElemAllAttr(e),r=$("<label />");if(r.attr(i),r.removeClass(),"SELECT"==e.prop("tagName")){var o=e.find("option:selected").text();r.text(o)}else r.text(e.val());e.replaceWith(r)},TryBindUrlValue:function(e){var t=e.$singleControlElem,n=t.attr("columnname");n||(n=t.attr("fieldname"));var a=RuntimeGeneralInstance.TryGetUrlParaValueByFieldName("BindToField",n);a&&(t.val(a),console.log(a))},TryGetFieldPOInRelationFormRecordComplexPo:function(e,t){var n=HTMLControl.GetControlBindRelationId(e),a=HTMLControl.GetControlBindTableName(e),i=HTMLControl.GetControlBindFieldName(e);return n&&i?FormRelationPOUtility.FindFieldPOInRelationFormRecordComplexPoOneDataRecord(t,n,a,i):null},FindALLControls:function(e){return e?e.find("[jbuild4dc_custom='true']"):$("[jbuild4dc_custom='true']")},GetControlBindTableName:function(e){return e.attr("tablename")},GetControlBindFieldName:function(e){return e.attr("fieldname")},GetControlBindRelationId:function(e){return e.attr("relationid")},GetControlProp:function(e){var t={singleName:"",tableName:"",tableCaption:"",tableId:"",fieldTableId:"",fieldName:"",fieldDataType:"",fieldDataLength:"",defaultType:"",defaultValue:"",id:"",serialize:"",value:""};for(var n in t){var a=e.attr(StringUtility.ToLowerCase(n));StringUtility.IsNullOrEmpty(a)||(t[n]=a)}return t.fieldDataLength=e.attr("fieldlength"),t},BuildSerializationOriginalData:function(e,t,n,a){return{relationId:t,relationSingleName:n,relationType:a,singleName:e.singleName,tableName:e.tableName,tableCaption:e.tableCaption,tableId:e.tableId,fieldTableId:e.fieldTableId,fieldName:e.fieldName,fieldDataType:e.fieldDataType,fieldDataLength:e.fieldDataLength,serialize:e.serialize,id:e.id,defaultType:e.defaultType,defaultValue:e.defaultValue,value:"",success:!0,msg:""}},GetSerializationOneDataRecordFieldValue:function(e,t,n){for(var a=0;a<e.length;a++)if(e[a].tableName==t&&e[a].fieldName==n)return e[a].value;return""},TryGetFieldTransferPO:function(e,t,n,a){var i=HTMLControl.GetControlProp(e),r=HTMLControl.BuildSerializationOriginalData(i,t,n,a),o=HTMLControl.GetControlInstanceByElem(e);if(BaseUtility.IsFunction(o.GetValue)){var l=o.GetValue(e,r,{});return l.success?l:null}DialogUtility.AlertText("控件:"+e.attr("singlename")+"未包含GetValue的方法!")},GetSimpleControlValue:function(e,t){var n=$("[tableid='"+e+"'][fieldname='"+t+"']");return 0==n.length?null:n.val()},TryBindElementAttrToInstanceProp:function(e,t){var n={};for(var a in t)e.attr(a)?n[a]=e.attr(a):"elemId"==a?n.elemId=e.attr("id"):"instanceName"==a?n.instanceName=e.attr("client_instance_name"):n[a]=t[a];return n.$singleControlElem=e,n}},VirtualBodyControl={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,InitStyle:function(e){e.$singleControlElem;var t=e.formRuntimeInstance;this.TryAutoSetHeight(t)},TryAutoSetHeight:function(e){if(0<$(".auto-full-page-height-wrap").length){var t=e._Prop_Config.WebFormRTParas.WindowHeight;t&&(t-=130,this.HasRootTabContainer()&&(t-=70),$(".auto-full-page-height-wrap").height(t),$(".auto-full-page-height-wrap").each(function(){var e=$(this);new PerfectScrollbar(e[0])}))}},HasRootTabContainer:function(){return 0<$("#htmlDesignRuntimeWrap").children("[singlename='WFDCT_TabContainer']").length}},InnerFormButton={_prop:{elem:null,innerButtonConfig:null,formRuntimeInstance:null,listButtonPO:null,formRuntimeCategory:""},Instance:function(e,t,n,a){var i=$('<button type="button" class="operation-button operation-button-primary" id="'+e.id+'"><span>'+e.caption+"</span></button>");return i.bind("click",{innerButtonConfig:e,formRuntimeInstance:t,listButtonPO:n,formRuntimeCategory:a,_this:this},this.ButtonClickEvent),{elem:i}},GetProp:function(e){return{elem:e.data._this,innerButtonConfig:e.data.innerButtonConfig,formRuntimeInstance:e.data.formRuntimeInstance,listButtonPO:e.data.listButtonPO,formRuntimeCategory:e.data.formRuntimeCategory}},ButtonClickEvent:function(e){DialogUtility.Frame_CloseDialog(window)}},InnerFormCloseButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){DialogUtility.Frame_CloseDialog(window)}},InnerFormJsClientButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){"reloadData"==e.data.innerButtonConfig.actionType?window.location.href=window.location.href:window.print()}},InnerFormSaveButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){var t=e.data.innerButtonConfig,a=e.data.formRuntimeInstance,n=e.data.listButtonPO,i=e.data._this,r=t.saveAndClose,o=ValidateRulesRuntime.ValidateSubmitEnable();if(i._prop=InnerFormButton.GetProp(e),ValidateRulesRuntime.AlertValidateErrors(o)){var l=a.SerializationFormData(),s=a._Prop_Config.OperationType;DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{title:"系统提示"},"系统处理中,请稍候..."),RuntimeGeneralInstance.SubmitFormDataComplexPOListToServer(l,l.recordId,t.id,n.buttonId,s,function(e){if(e.success){if(this._prop.formRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_LIST){console.log(this._prop);var t=a.GetOpenedListFormButtonId();window.OpenerWindowObj.WLDCT_ListTableContainer.TryReloadForListFormButton(t),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){DialogUtility.Frame_CloseDialog(window)},this)},500)}else if(this._prop.formRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_INDEPENDENCE)if("dev"==this._prop.formRuntimeInstance._FormPO.formOperationType){var n=BaseUtility.GetUrlParaValue("devOperationEndFunc");StringUtility.IsNotNullOrEmpty(n)&&window.OpenerWindowObj[n](this._prop),"true"==this._prop.innerButtonConfig.saveAndClose&&window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){DialogUtility.Frame_CloseDialog(window)},this)},500)}else DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){r&&DialogUtility.AlertText("关闭窗口,未完成!"),window.location.href=window.location.href},this)}else DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},i)}}};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(n){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),n(t,e,e.document)}:n(jQuery,window,document)}(function(v,s,d,S){var t,r=v.fn.dataTable,u=function e(t,n){var a=this;if(this instanceof e){n!==S&&!0!==n||(n={});var i=v.fn.dataTable.camelToHungarian;i&&(i(e.defaults,e.defaults,!0),i(e.defaults,n));var r=new v.fn.dataTable.Api(t).settings()[0];if(this.s={dt:r,iTableColumns:r.aoColumns.length,aiOuterWidths:[],aiInnerWidths:[],rtl:"rtl"===v(r.nTable).css("direction")},this.dom={scroller:null,header:null,body:null,footer:null,grid:{wrapper:null,dt:null,left:{wrapper:null,head:null,body:null,foot:null},right:{wrapper:null,head:null,body:null,foot:null}},clone:{left:{header:null,body:null,footer:null},right:{header:null,body:null,footer:null}}},r._oFixedColumns)throw"FixedColumns already initialised on this table";r._oFixedColumns=this,r._bInitComplete?this._fnConstruct(n):r.oApi._fnCallbackReg(r,"aoInitComplete",function(){a._fnConstruct(n)},"FixedColumns")}else alert("FixedColumns warning: FixedColumns must be initialised with the 'new' keyword.")};return v.extend(u.prototype,{fnUpdate:function(){this._fnDraw(!0)},fnRedrawLayout:function(){this._fnColCalc(),this._fnGridLayout(),this.fnUpdate()},fnRecalculateHeight:function(e){delete e._DTTC_iHeight,e.style.height="auto"},fnSetRowHeight:function(e,t){e.style.height=t+"px"},fnGetPosition:function(e){var t,n=this.s.dt.oInstance;if(v(e).parents(".DTFC_Cloned").length){if("tr"===e.nodeName.toLowerCase())return t=v(e).index(),n.fnGetPosition(v("tr",this.s.dt.nTBody)[t]);var a=v(e).index();return t=v(e.parentNode).index(),[n.fnGetPosition(v("tr",this.s.dt.nTBody)[t]),a,n.oApi._fnVisibleToColumnIndex(this.s.dt,a)]}return n.fnGetPosition(e)},_fnConstruct:function(e){var r=this;if("function"==typeof this.s.dt.oInstance.fnVersionCheck&&!0===this.s.dt.oInstance.fnVersionCheck("1.8.0"))if(""!==this.s.dt.oScroll.sX){this.s=v.extend(!0,this.s,u.defaults,e);var t,n=this.s.dt.oClasses;this.dom.grid.dt=v(this.s.dt.nTable).parents("div."+n.sScrollWrapper)[0],this.dom.scroller=v("div."+n.sScrollBody,this.dom.grid.dt)[0],this._fnColCalc(),this._fnGridSetup();var a=!1;v(this.s.dt.nTableWrapper).on("mousedown.DTFC",function(e){0===e.button&&(a=!0,v(d).one("mouseup",function(){a=!1}))}),v(this.dom.scroller).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="main")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="main"),"main"===t&&(0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.scroller.scrollTop),0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.scroller.scrollTop))});var i="onwheel"in d.createElement("div")?"wheel.DTFC":"mousewheel.DTFC";0<r.s.iLeftColumns&&v(r.dom.grid.left.liner).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="left")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="left"),"left"===t&&(r.dom.scroller.scrollTop=r.dom.grid.left.liner.scrollTop,0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.grid.left.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),0<r.s.iRightColumns&&v(r.dom.grid.right.liner).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="right")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="right"),"right"===t&&(r.dom.scroller.scrollTop=r.dom.grid.right.liner.scrollTop,0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.grid.right.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),v(s).on("resize.DTFC",function(){r._fnGridLayout.call(r)});var o=!0,l=v(this.s.dt.nTable);l.on("draw.dt.DTFC",function(){r._fnColCalc(),r._fnDraw.call(r,o),o=!1}).on("column-sizing.dt.DTFC",function(){r._fnColCalc(),r._fnGridLayout(r)}).on("column-visibility.dt.DTFC",function(e,t,n,a,i){(i===S||i)&&(r._fnColCalc(),r._fnGridLayout(r),r._fnDraw(!0))}).on("select.dt.DTFC deselect.dt.DTFC",function(e,t,n,a){"dt"===e.namespace&&r._fnDraw(!1)}).on("destroy.dt.DTFC",function(){l.off(".DTFC"),v(r.dom.scroller).off(".DTFC"),v(s).off(".DTFC"),v(r.s.dt.nTableWrapper).off(".DTFC"),v(r.dom.grid.left.liner).off(".DTFC "+i),v(r.dom.grid.left.wrapper).remove(),v(r.dom.grid.right.liner).off(".DTFC "+i),v(r.dom.grid.right.wrapper).remove()}),this._fnGridLayout(),this.s.dt.oInstance.fnDraw(!1)}else this.s.dt.oInstance.oApi._fnLog(this.s.dt,1,"FixedColumns is not needed (no x-scrolling in DataTables enabled), so no action will be taken. Use 'FixedHeader' for column fixing when scrolling is not enabled");else alert("FixedColumns "+u.VERSION+" required DataTables 1.8.0 or later. Please upgrade your DataTables installation")},_fnColCalc:function(){var r=this,o=0,l=0;this.s.aiInnerWidths=[],this.s.aiOuterWidths=[],v.each(this.s.dt.aoColumns,function(e,t){var n,a=v(t.nTh);if(a.filter(":visible").length){var i=a.outerWidth();0===r.s.aiOuterWidths.length&&(i+="string"==typeof(n=v(r.s.dt.nTable).css("border-left-width"))&&-1===n.indexOf("px")?1:parseInt(n,10)),r.s.aiOuterWidths.length===r.s.dt.aoColumns.length-1&&(i+="string"==typeof(n=v(r.s.dt.nTable).css("border-right-width"))&&-1===n.indexOf("px")?1:parseInt(n,10)),r.s.aiOuterWidths.push(i),r.s.aiInnerWidths.push(a.width()),e<r.s.iLeftColumns&&(o+=i),r.s.iTableColumns-r.s.iRightColumns<=e&&(l+=i)}else r.s.aiInnerWidths.push(0),r.s.aiOuterWidths.push(0)}),this.s.iLeftWidth=o,this.s.iRightWidth=l},_fnGridSetup:function(){var e,t=this._fnDTOverflow();this.dom.body=this.s.dt.nTable,this.dom.header=this.s.dt.nTHead.parentNode,this.dom.header.parentNode.parentNode.style.position="relative";var n=v('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;"><div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;" aria-hidden="true"><div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div><div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div></div><div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;" aria-hidden="true"><div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div><div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div></div></div>')[0],a=n.childNodes[0],i=n.childNodes[1];this.dom.grid.dt.parentNode.insertBefore(n,this.dom.grid.dt),n.appendChild(this.dom.grid.dt),this.dom.grid.wrapper=n,0<this.s.iLeftColumns&&(this.dom.grid.left.wrapper=a,this.dom.grid.left.head=a.childNodes[0],this.dom.grid.left.body=a.childNodes[1],this.dom.grid.left.liner=v("div.DTFC_LeftBodyLiner",n)[0],n.appendChild(a)),0<this.s.iRightColumns&&(this.dom.grid.right.wrapper=i,this.dom.grid.right.head=i.childNodes[0],this.dom.grid.right.body=i.childNodes[1],this.dom.grid.right.liner=v("div.DTFC_RightBodyLiner",n)[0],i.style.right=t.bar+"px",(e=v("div.DTFC_RightHeadBlocker",n)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.headBlock=e,(e=v("div.DTFC_RightFootBlocker",n)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.footBlock=e,n.appendChild(i)),this.s.dt.nTFoot&&(this.dom.footer=this.s.dt.nTFoot.parentNode,0<this.s.iLeftColumns&&(this.dom.grid.left.foot=a.childNodes[2]),0<this.s.iRightColumns&&(this.dom.grid.right.foot=i.childNodes[2])),this.s.rtl&&v("div.DTFC_RightHeadBlocker",n).css({left:-t.bar+"px",right:""})},_fnGridLayout:function(){var e,n=this,t=this.dom.grid,a=(v(t.wrapper).width(),this.s.dt.nTable.parentNode.offsetHeight),i=this.s.dt.nTable.parentNode.parentNode.offsetHeight,r=this._fnDTOverflow(),o=this.s.iLeftWidth,l=this.s.iRightWidth,s="rtl"===v(this.dom.body).css("direction"),d=function(e,t){r.bar?n._firefoxScrollError()?34<v(e).height()&&(e.style.width=t+r.bar+"px"):e.style.width=t+r.bar+"px":(e.style.width=t+20+"px",e.style.paddingRight="20px",e.style.boxSizing="border-box")};r.x&&(a-=r.bar),t.wrapper.style.height=i+"px",0<this.s.iLeftColumns&&((e=t.left.wrapper).style.width=o+"px",e.style.height="1px",e.style.right=s?(e.style.left="",0):(e.style.left=0,""),t.left.body.style.height=a+"px",t.left.foot&&(t.left.foot.style.top=(r.x?r.bar:0)+"px"),d(t.left.liner,o),t.left.liner.style.height=a+"px",t.left.liner.style.maxHeight=a+"px"),0<this.s.iRightColumns&&((e=t.right.wrapper).style.width=l+"px",e.style.height="1px",this.s.rtl?(e.style.left=r.y?r.bar+"px":0,e.style.right=""):(e.style.left="",e.style.right=r.y?r.bar+"px":0),t.right.body.style.height=a+"px",t.right.foot&&(t.right.foot.style.top=(r.x?r.bar:0)+"px"),d(t.right.liner,l),t.right.liner.style.height=a+"px",t.right.liner.style.maxHeight=a+"px",t.right.headBlock.style.display=r.y?"block":"none",t.right.footBlock.style.display=r.y?"block":"none")},_fnDTOverflow:function(){var e=this.s.dt.nTable,t=e.parentNode,n={x:!1,y:!1,bar:this.s.dt.oScroll.iBarWidth};return e.offsetWidth>t.clientWidth&&(n.x=!0),e.offsetHeight>t.clientHeight&&(n.y=!0),n},_fnDraw:function(e){this._fnGridLayout(),this._fnCloneLeft(e),this._fnCloneRight(e),null!==this.s.fnDrawCallback&&this.s.fnDrawCallback.call(this,this.dom.clone.left,this.dom.clone.right),v(this).trigger("draw.dtfc",{leftClone:this.dom.clone.left,rightClone:this.dom.clone.right})},_fnCloneRight:function(e){if(!(this.s.iRightColumns<=0)){var t,n=[];for(t=this.s.iTableColumns-this.s.iRightColumns;t<this.s.iTableColumns;t++)this.s.dt.aoColumns[t].bVisible&&n.push(t);this._fnClone(this.dom.clone.right,this.dom.grid.right,n,e)}},_fnCloneLeft:function(e){if(!(this.s.iLeftColumns<=0)){var t,n=[];for(t=0;t<this.s.iLeftColumns;t++)this.s.dt.aoColumns[t].bVisible&&n.push(t);this._fnClone(this.dom.clone.left,this.dom.grid.left,n,e)}},_fnCopyLayout:function(e,t,n){for(var a=[],i=[],r=[],o=0,l=e.length;o<l;o++){var s=[];s.nTr=v(e[o].nTr).clone(n,!1)[0];for(var d=0,u=this.s.iTableColumns;d<u;d++)if(-1!==v.inArray(d,t)){var c=v.inArray(e[o][d].cell,r);if(-1===c){var f=v(e[o][d].cell).clone(n,!1)[0];i.push(f),r.push(e[o][d].cell),s.push({cell:f,unique:e[o][d].unique})}else s.push({cell:i[c],unique:e[o][d].unique})}a.push(s)}return a},_fnClone:function(e,t,i,n){var a,r,o,l,s,d,u,c,f,h,p=this,m=this.s.dt;if(n){for(v(e.header).remove(),e.header=v(this.dom.header).clone(!0,!1)[0],e.header.className+=" DTFC_Cloned",e.header.style.width="100%",t.head.appendChild(e.header),c=this._fnCopyLayout(m.aoHeader,i,!0),(f=v(">thead",e.header)).empty(),a=0,r=c.length;a<r;a++)f[0].appendChild(c[a].nTr);m.oApi._fnDrawHead(m,c,!0)}else for(c=this._fnCopyLayout(m.aoHeader,i,!1),h=[],m.oApi._fnDetectHeader(h,v(">thead",e.header)[0]),a=0,r=c.length;a<r;a++)for(o=0,l=c[a].length;o<l;o++)h[a][o].cell.className=c[a][o].cell.className,v("span.DataTables_sort_icon",h[a][o].cell).each(function(){this.className=v("span.DataTables_sort_icon",c[a][o].cell)[0].className});this._fnEqualiseHeights("thead",this.dom.header,e.header),"auto"==this.s.sHeightMatch&&v(">tbody>tr",p.dom.body).css("height","auto"),null!==e.body&&(v(e.body).remove(),e.body=null),e.body=v(this.dom.body).clone(!0)[0],e.body.className+=" DTFC_Cloned",e.body.style.paddingBottom=m.oScroll.iBarWidth+"px",e.body.style.marginBottom=2*m.oScroll.iBarWidth+"px",null!==e.body.getAttribute("id")&&e.body.removeAttribute("id"),v(">thead>tr",e.body).empty(),v(">tfoot",e.body).remove();var T=v("tbody",e.body)[0];if(v(T).empty(),0<m.aiDisplay.length){var g=v(">thead>tr",e.body)[0];for(u=0;u<i.length;u++){s=i[u],(d=v(m.aoColumns[s].nTh).clone(!0)[0]).innerHTML="";var _=d.style;_.paddingTop="0",_.paddingBottom="0",_.borderTopWidth="0",_.borderBottomWidth="0",_.height=0,_.width=p.s.aiInnerWidths[s]+"px",g.appendChild(d)}v(">tbody>tr",p.dom.body).each(function(e){var t=!1===p.s.dt.oFeatures.bServerSide?p.s.dt.aiDisplay[p.s.dt._iDisplayStart+e]:e,n=p.s.dt.aoData[t].anCells||v(this).children("td, th"),a=this.cloneNode(!1);for(a.removeAttribute("id"),a.setAttribute("data-dt-row",t),u=0;u<i.length;u++)s=i[u],0<n.length&&((d=v(n[s]).clone(!0,!0)[0]).removeAttribute("id"),d.setAttribute("data-dt-row",t),d.setAttribute("data-dt-column",s),a.appendChild(d));T.appendChild(a)})}else v(">tbody>tr",p.dom.body).each(function(e){(d=this.cloneNode(!0)).className+=" DTFC_NoData",v("td",d).html(""),T.appendChild(d)});if(e.body.style.width="100%",e.body.style.margin="0",e.body.style.padding="0",m.oScroller!==S){var b=m.oScroller.dom.force;t.forcer?t.forcer.style.height=b.style.height:(t.forcer=b.cloneNode(!0),t.liner.appendChild(t.forcer))}if(t.liner.appendChild(e.body),this._fnEqualiseHeights("tbody",p.dom.body,e.body),null!==m.nTFoot){if(n){null!==e.footer&&e.footer.parentNode.removeChild(e.footer),e.footer=v(this.dom.footer).clone(!0,!0)[0],e.footer.className+=" DTFC_Cloned",e.footer.style.width="100%",t.foot.appendChild(e.footer),c=this._fnCopyLayout(m.aoFooter,i,!0);var C=v(">tfoot",e.footer);for(C.empty(),a=0,r=c.length;a<r;a++)C[0].appendChild(c[a].nTr);m.oApi._fnDrawHead(m,c,!0)}else{c=this._fnCopyLayout(m.aoFooter,i,!1);var y=[];for(m.oApi._fnDetectHeader(y,v(">tfoot",e.footer)[0]),a=0,r=c.length;a<r;a++)for(o=0,l=c[a].length;o<l;o++)y[a][o].cell.className=c[a][o].cell.className}this._fnEqualiseHeights("tfoot",this.dom.footer,e.footer)}var D=m.oApi._fnGetUniqueThs(m,v(">thead",e.header)[0]);v(D).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}),null!==p.s.dt.nTFoot&&(D=m.oApi._fnGetUniqueThs(m,v(">tfoot",e.footer)[0]),v(D).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}))},_fnGetTrNodes:function(e){for(var t=[],n=0,a=e.childNodes.length;n<a;n++)"TR"==e.childNodes[n].nodeName.toUpperCase()&&t.push(e.childNodes[n]);return t},_fnEqualiseHeights:function(e,t,n){if("none"!=this.s.sHeightMatch||"thead"===e||"tfoot"===e){var a,i,r,o,l,s=t.getElementsByTagName(e)[0],d=n.getElementsByTagName(e)[0],u=v(">"+e+">tr:eq(0)",t).children(":first"),c=(u.outerHeight(),u.height(),this._fnGetTrNodes(s)),f=this._fnGetTrNodes(d),h=[];for(a=0,i=f.length;a<i;a++)r=(o=c[a].offsetHeight)<(l=f[a].offsetHeight)?l:o,"semiauto"==this.s.sHeightMatch&&(c[a]._DTTC_iHeight=r),h.push(r);for(a=0,i=f.length;a<i;a++)f[a].style.height=h[a]+"px",c[a].style.height=h[a]+"px"}},_firefoxScrollError:function(){if(t===S){var e=v("<div/>").css({position:"absolute",top:0,left:0,height:10,width:50,overflow:"scroll"}).appendTo("body");t=e[0].clientWidth===e[0].offsetWidth&&0!==this._fnDTOverflow().bar,e.remove()}return t}}),u.defaults={iLeftColumns:1,iRightColumns:0,fnDrawCallback:null,sHeightMatch:"semiauto"},u.version="3.2.5",r.Api.register("fixedColumns()",function(){return this}),r.Api.register("fixedColumns().update()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnUpdate()})}),r.Api.register("fixedColumns().relayout()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnRedrawLayout()})}),r.Api.register("rows().recalcHeight()",function(){return this.iterator("row",function(e,t){e._oFixedColumns&&e._oFixedColumns.fnRecalculateHeight(this.row(t).node())})}),r.Api.register("fixedColumns().rowIndex()",function(e){return(e=v(e)).parents(".DTFC_Cloned").length?this.rows({page:"current"}).indexes()[e.index()]:this.row(e).index()}),r.Api.register("fixedColumns().cellIndex()",function(e){if((e=v(e)).parents(".DTFC_Cloned").length){var t,n=e.parent().index(),a=this.rows({page:"current"}).indexes()[n];if(e.parents(".DTFC_LeftWrapper").length)t=e.index();else t=this.columns().flatten().length-this.context[0]._oFixedColumns.s.iRightColumns+e.index();return{row:a,column:this.column.index("toData",t),columnVisible:t}}return this.cell(e).index()}),v(d).on("init.dt.fixedColumns",function(e,t){if("dt"===e.namespace){var n=t.oInit.fixedColumns,a=r.defaults.fixedColumns;if(n||a){var i=v.extend({},n,a);!1!==n&&new u(t,i)}}}),v.fn.dataTable.FixedColumns=u,v.fn.DataTable.FixedColumns=u}),function(n){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),n(t,e,e.document)}:n(jQuery,window,document)}(function(l,i,s,r){var o=l.fn.dataTable,d=0,u=function e(t,n){if(!(this instanceof e))throw"FixedHeader must be initialised with the 'new' keyword.";!0===n&&(n={}),t=new o.Api(t),this.c=l.extend(!0,{},e.defaults,n),this.s={dt:t,position:{theadTop:0,tbodyTop:0,tfootTop:0,tfootBottom:0,width:0,left:0,tfootHeight:0,theadHeight:0,windowHeight:l(i).height(),visible:!0},headerMode:null,footerMode:null,autoWidth:t.settings()[0].oFeatures.bAutoWidth,namespace:".dtfc"+d++,scrollLeft:{header:-1,footer:-1},enable:!0},this.dom={floatingHeader:null,thead:l(t.table().header()),tbody:l(t.table().body()),tfoot:l(t.table().footer()),header:{host:null,floating:null,placeholder:null},footer:{host:null,floating:null,placeholder:null}},this.dom.header.host=this.dom.thead.parent(),this.dom.footer.host=this.dom.tfoot.parent();var a=t.settings()[0];if(a._fixedHeader)throw"FixedHeader already initialised on table "+a.nTable.id;(a._fixedHeader=this)._constructor()};return l.extend(u.prototype,{enable:function(e){this.s.enable=e,this.c.header&&this._modeChange("in-place","header",!0),this.c.footer&&this.dom.tfoot.length&&this._modeChange("in-place","footer",!0),this.update()},headerOffset:function(e){return e!==r&&(this.c.headerOffset=e,this.update()),this.c.headerOffset},footerOffset:function(e){return e!==r&&(this.c.footerOffset=e,this.update()),this.c.footerOffset},update:function(){this._positions(),this._scroll(!0)},_constructor:function(){var e=this,t=this.s.dt;l(i).on("scroll"+this.s.namespace,function(){e._scroll()}).on("resize"+this.s.namespace,o.util.throttle(function(){e.s.position.windowHeight=l(i).height(),e.update()},50));var n=l(".fh-fixedHeader");!this.c.headerOffset&&n.length&&(this.c.headerOffset=n.outerHeight());var a=l(".fh-fixedFooter");!this.c.footerOffset&&a.length&&(this.c.footerOffset=a.outerHeight()),t.on("column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc",function(){e.update()}),t.on("destroy.dtfc",function(){e.c.header&&e._modeChange("in-place","header",!0),e.c.footer&&e.dom.tfoot.length&&e._modeChange("in-place","footer",!0),t.off(".dtfc"),l(i).off(e.s.namespace)}),this._positions(),this._scroll()},_clone:function(e,t){var n=this.s.dt,a=this.dom[e],i="header"===e?this.dom.thead:this.dom.tfoot;!t&&a.floating?a.floating.removeClass("fixedHeader-floating fixedHeader-locked"):(a.floating&&(a.placeholder.remove(),this._unsize(e),a.floating.children().detach(),a.floating.remove()),a.floating=l(n.table().node().cloneNode(!1)).css("table-layout","fixed").attr("aria-hidden","true").removeAttr("id").append(i).appendTo("body"),a.placeholder=i.clone(!1),a.placeholder.find("*[id]").removeAttr("id"),a.host.prepend(a.placeholder),this._matchWidths(a.placeholder,a.floating))},_matchWidths:function(t,n){var e=function(e){return l(e,t).map(function(){return l(this).width()}).toArray()},a=function(e,t){l(e,n).each(function(e){l(this).css({width:t[e],minWidth:t[e]})})},i=e("th"),r=e("td");a("th",i),a("td",r)},_unsize:function(e){var t=this.dom[e].floating;t&&("footer"===e||"header"===e&&!this.s.autoWidth)?l("th, td",t).css({width:"",minWidth:""}):t&&"header"===e&&l("th, td",t).css("min-width","")},_horizontal:function(e,t){var n=this.dom[e],a=this.s.position,i=this.s.scrollLeft;n.floating&&i[e]!==t&&(n.floating.css("left",a.left-t),i[e]=t)},_modeChange:function(e,t,n){this.s.dt;var a=this.dom[t],i=this.s.position,r=this.dom["footer"===t?"tfoot":"thead"],o=l.contains(r[0],s.activeElement)?s.activeElement:null;o&&o.blur(),"in-place"===e?(a.placeholder&&(a.placeholder.remove(),a.placeholder=null),this._unsize(t),"header"===t?a.host.prepend(r):a.host.append(r),a.floating&&(a.floating.remove(),a.floating=null)):"in"===e?(this._clone(t,n),a.floating.addClass("fixedHeader-floating").css("header"===t?"top":"bottom",this.c[t+"Offset"]).css("left",i.left+"px").css("width",i.width+"px"),"footer"===t&&a.floating.css("top","")):"below"===e?(this._clone(t,n),a.floating.addClass("fixedHeader-locked").css("top",i.tfootTop-i.theadHeight).css("left",i.left+"px").css("width",i.width+"px")):"above"===e&&(this._clone(t,n),a.floating.addClass("fixedHeader-locked").css("top",i.tbodyTop).css("left",i.left+"px").css("width",i.width+"px")),o&&o!==s.activeElement&&setTimeout(function(){o.focus()},10),this.s.scrollLeft.header=-1,this.s.scrollLeft.footer=-1,this.s[t+"Mode"]=e},_positions:function(){var e=this.s.dt.table(),t=this.s.position,n=this.dom,a=l(e.node()),i=a.children("thead"),r=a.children("tfoot"),o=n.tbody;t.visible=a.is(":visible"),t.width=a.outerWidth(),t.left=a.offset().left,t.theadTop=i.offset().top,t.tbodyTop=o.offset().top,t.theadHeight=t.tbodyTop-t.theadTop,r.length?(t.tfootTop=r.offset().top,t.tfootBottom=t.tfootTop+r.outerHeight(),t.tfootHeight=t.tfootBottom-t.tfootTop):(t.tfootTop=t.tbodyTop+o.outerHeight(),t.tfootBottom=t.tfootTop,t.tfootHeight=t.tfootTop)},_scroll:function(e){var t,n,a=l(s).scrollTop(),i=l(s).scrollLeft(),r=this.s.position;this.s.enable&&(this.c.header&&(t=!r.visible||a<=r.theadTop-this.c.headerOffset?"in-place":a<=r.tfootTop-r.theadHeight-this.c.headerOffset?"in":"below",(e||t!==this.s.headerMode)&&this._modeChange(t,"header",e),this._horizontal("header",i)),this.c.footer&&this.dom.tfoot.length&&(n=!r.visible||a+r.windowHeight>=r.tfootBottom+this.c.footerOffset?"in-place":r.windowHeight+a>r.tbodyTop+r.tfootHeight+this.c.footerOffset?"in":"above",(e||n!==this.s.footerMode)&&this._modeChange(n,"footer",e),this._horizontal("footer",i)))}}),u.version="3.1.4",u.defaults={header:!0,footer:!1,headerOffset:0,footerOffset:0},l.fn.dataTable.FixedHeader=u,l.fn.DataTable.FixedHeader=u,l(s).on("init.dt.dtfh",function(e,t,n){if("dt"===e.namespace){var a=t.oInit.fixedHeader,i=o.defaults.fixedHeader;if((a||i)&&!t._fixedHeader){var r=l.extend({},i,a);!1!==a&&new u(t,r)}}}),o.Api.register("fixedHeader()",function(){}),o.Api.register("fixedHeader.adjust()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.update()})}),o.Api.register("fixedHeader.enable()",function(n){return this.iterator("table",function(e){var t=e._fixedHeader;n=n===r||n,t&&n!==t.s.enable&&t.enable(n)})}),o.Api.register("fixedHeader.disable()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.s.enable&&t.enable(!1)})}),l.each(["header","footer"],function(e,a){o.Api.register("fixedHeader."+a+"Offset()",function(n){var e=this.context;return n===r?e.length&&e[0]._fixedHeader?e[0]._fixedHeader[a+"Offset"]():r:this.iterator("table",function(e){var t=e._fixedHeader;t&&t[a+"Offset"](n)})})}),u});var WFDCT_BaiduMapContainer={_prop:{elemId:"",clientInstanceName:"",$singleControlElem:null,mapObj:null,mapSelectedLngLat:"",mapEditObjs:[],mapViewObjs:[],oldEditData:null,operationType:""},LoadBaiDuJsCompleted:function(){var t=this;if(this._prop.mapObj=new BMapGL.Map(this._prop.elemId),this._prop.mapObj.centerAndZoom(new BMapGL.Point(114.54200132645097,22.754142795907825),16),this._prop.mapObj.enableScrollWheelZoom(!0),this._prop.mapObj.addEventListener("click",function(e){t._prop.mapSelectedLngLat=e.latlng}),BaseUtility.IsViewOperation(this._prop.operationType)||this.InitDrawControl(),this._prop.oldEditData){console.log(this._prop.oldEditData);for(var e=this._prop.oldEditData,n=0;n<e.length;n++)if("point"==e[n].type){var a=new BMapGL.Point(e[n].path.lng,e[n].path.lat),i=new BMapGL.Marker(a,{});this._prop.mapObj.addOverlay(i),this._prop.mapObj.panTo(a),this.addToMapEditObjs("point",i)}}},InitializeAtInstance:function(e,t,n){},RendererChain:function(e){console.log(e);var t=e.$singleControlElem;this._prop.elemId=t.attr("id"),this._prop.clientInstanceName=t.attr("client_instance_name"),this._prop.$singleControlElem=t,this._prop.operationType=e.formRuntimeInstance._Prop_Config.OperationType,$("#"+this._prop.elemId).addClass("map-control-wrap");var n=this._prop.clientInstanceName+".LoadBaiDuJsCompleted";BaiduMapUtility.LoadJsCompleted(n)},RendererDataChain:function(){},GetValue:function(e,t,n){var a=[];if(this._prop.mapEditObjs&&0<this._prop.mapEditObjs.length){for(var i=0;i<this._prop.mapEditObjs.length;i++)"point"==this._prop.mapEditObjs[i].type&&a.push({type:this._prop.mapEditObjs[i].type,path:this._prop.mapEditObjs[i].obj.getPosition()});a=JsonUtility.JsonToString(a)}return t.value=a,t},SetValue:function(e,t,n,a){t&&t.value&&(this._prop.oldEditData=JsonUtility.StringToJson(t.value))},ToViewStatus:function(e,t,n,a){},addToMapEditObjs:function(e,t){this._prop.mapEditObjs.push({type:e,obj:t})},InitDrawControl:function(){var e=this._prop.$singleControlElem;e.parent().addClass("map-control-wrap");var t=$("<div class='map-operation-button-wrap'></div>"),n=$("<div class='map-operation-button map-operation-button-add-point' title='添加定位点'></div>"),a=$("<div class='map-operation-button map-operation-button-clear' title='清空设置'></div>");t.append(n),t.append(a),e.parent().append(t);var i=this;n.click(function(){i._prop.mapSelectedLngLat||DialogUtility.AlertText("请先点击地图，确认坐标。");var e=new BMapGL.Point(i._prop.mapSelectedLngLat.lng,i._prop.mapSelectedLngLat.lat),t=new BMapGL.Marker(e,{});i._prop.mapObj.addOverlay(t),i.addToMapEditObjs("point",t)}),a.click(function(){for(var e=0;e<i._prop.mapEditObjs.length;e++){var t=i._prop.mapEditObjs[e];i._prop.mapObj.removeOverlay(t.obj)}i._prop.mapEditObjs=[]})}},_ref_filePath=$("script").last().attr("src"),WFDCT_CKEditor4={ckeditorInstance:null,RendererChain:function(e){var t=e.$singleControlElem,n=t.height();if(BaseUtility.IsViewOperation(e.formRuntimeInstance.GetOperationType()));else{var a=_ref_filePath.substr(_ref_filePath.lastIndexOf("/")+1),i=BaseUtility.AppendTimeStampUrl(_ref_filePath.replace(a,"Control/WebFormControl/"+t.attr("customconfig")));console.log(i),this.ckeditorInstance=CKEDITOR.replace(t.attr("id"),{customConfig:i,formRuntimeInstance:e.formRuntimeInstance}),this.ckeditorInstance.config.height=n}},RendererDataChain:function(){},GetValue:function(e,t,n){return t.value=this.ckeditorInstance.getData(),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value))},ToViewStatus:function(e,t,n,a){var i=$("<div></div>"),r=BaseUtility.GetElemAllAttr(e);i.attr(r),i.removeClass(),i.html(t.value),i.css("overflow","auto"),i.height(i.height()+100),e.replaceWith(i)}},WFDCT_DocumentContentUploadConvertToPDFContainer={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_DropDownSelect={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){var t=e.$singleControlElem,n=t.attr("defaultselected");n&&t.val(n)},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_FileImageList={_objectType:"Instance",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,opButtons:null,beforeSelectJSMethod:null,afterUploadedJsMethod:null,fileExType:null,authType:null,rendererContainerJsMethod:null,rendererSingleRowJsMethod:null,categoryType:null,getBindRecordIdJsMethod:null,getBindRecordTypeJsMethod:null,useTemplate:null,uploadEnable:!1,downloadEnable:!1,deleteEnable:!1,previewEnable:!1,moveOrderEnable:!1,clickFileNameAction:null,objType:""},acInterface:{getFileListData:"/Rest/Builder/RunTime/FileRuntime/GetImageFileListData",downLoadFileByFileId:"/Rest/Builder/RunTime/FileRuntime/DownLoadFileByFileId"},RendererChain:function(e){var t=e.$singleControlElem;this.BindElementAttrToInstanceProp(t),t.html(""),this.BuildFileList()},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,BindElementAttrToInstanceProp:function(e){this._prop.getBindRecordIdJsMethod||(this._prop.getBindRecordIdJsMethod=this._prop.instanceName+".GetThisRecordId()"),this._prop.getBindRecordTypeJsMethod||(this._prop.getBindRecordTypeJsMethod=this._prop.instanceName+".GetThisRecordType()")},GetThisRecordId:function(){var e="";return formRuntimeInst&&formRuntimeInst.GetWebFormRTParas()&&formRuntimeInst.GetWebFormRTParas().RecordId?e=formRuntimeInst.GetWebFormRTParas().RecordId:DialogUtility.AlertText("查找不到绑定的记录ID"),e},GetThisRecordType:function(){return this._prop.objType},BuildFileList:function BuildFileList(){var $singleControlElem=this._prop.$singleControlElem,file_image_list_wrap_id="file_image_list_wrap"+this._prop.elemId;$("#"+file_image_list_wrap_id).remove();var $divWarp=$("<div class='file-image-list-wrap' id='"+file_image_list_wrap_id+"'></div>"),objId=eval(this._prop.getBindRecordIdJsMethod),category=this._prop.categoryType;AjaxUtility.Post(this.acInterface.getFileListData,{objId:objId,categoryType:category},function(e){if(e.success)for(var t=0;t<e.data.length;t++){var n=e.data[t],a=this.BuildFileDislay(e,n);$divWarp.append(a)}console.log(e)},this),$($singleControlElem.append($divWarp))},BuildFileDislay:function(e,t){var n=t.fileId;return"<div class='img-wrap'><img src='"+BaseUtility.BuildAction(this.acInterface.downLoadFileByFileId,{fileId:n})+"' /></div>"}},WFDCT_FileUploadContainer={_objectType:"Instance",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,opButtons:null,beforeSelectJSMethod:null,afterUploadedJsMethod:null,fileExType:null,authType:null,rendererContainerJsMethod:null,rendererSingleRowJsMethod:null,categoryType:null,getBindRecordIdJsMethod:null,getBindRecordTypeJsMethod:null,useTemplate:null,uploadEnable:!1,downloadEnable:!1,deleteEnable:!1,previewEnable:!1,moveOrderEnable:!1,clickFileNameAction:null,objType:""},acInterface:{getFileListData:"/Rest/Builder/RunTime/FileRuntime/GetFileListData",uploadFile:"/Rest/Builder/RunTime/FileRuntime/UploadFile",downloadFile:"/Rest/Builder/RunTime/FileRuntime/DownLoadFileByFileId",deleteFile:"/Rest/Builder/RunTime/FileRuntime/DeleteFileByFileId"},RendererChain:function(e){var t=e.$singleControlElem;this.BindElementAttrToInstanceProp(t),t.html(""),this.BuildUploadContainer(),this.BuildFileList()},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:function(e,t,n,a){$("#"+this._prop.uploadWarpId).hide(),$("#"+this._prop.elemId).find(".delete-button-elem").hide(),$("#"+this._prop.elemId).find(".move-up-button-elem").hide(),$("#"+this._prop.elemId).find(".move-down-button-elem").hide()},BindElementAttrToInstanceProp:function(e){this._prop.getBindRecordIdJsMethod||(this._prop.getBindRecordIdJsMethod=this._prop.instanceName+".GetThisRecordId()"),this._prop.getBindRecordTypeJsMethod||(this._prop.getBindRecordTypeJsMethod=this._prop.instanceName+".GetThisRecordType()"),0<=this._prop.opButtons.indexOf("upload")&&(this._prop.uploadEnable=!0),0<=this._prop.opButtons.indexOf("download")&&(this._prop.downloadEnable=!0),0<=this._prop.opButtons.indexOf("delete")&&(this._prop.deleteEnable=!0),0<=this._prop.opButtons.indexOf("online-preview")&&(this._prop.previewEnable=!0),0<=this._prop.opButtons.indexOf("move-order")&&(this._prop.moveOrderEnable=!0)},GetThisRecordId:function(){var e="";return formRuntimeInst&&formRuntimeInst.GetRecordId()?e=formRuntimeInst.GetRecordId():DialogUtility.AlertText("查找不到绑定的记录ID"),e},GetThisRecordType:function(){return this._prop.objType},GetUploadEndPointRequest:function GetUploadEndPointRequest(){var endPoint=BaseUtility.GetRootPath()+this.acInterface.uploadFile,paras={objType:eval(this._prop.getBindRecordTypeJsMethod),objId:eval(this._prop.getBindRecordIdJsMethod),categoryType:this._prop.categoryType};return{endpoint:endPoint,params:paras}},CreateDefaultTemplate:function(e){$(window.document.body).append('<script type="text/template" id="'+e+'">\n        <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="拖放文件到这里进行上传。" style="min-height: 78px;">\n            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">\n                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>\n            </div>\n            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>\n                <span class="qq-upload-drop-area-text-selector"></span>\n            </div>\n            <div class="qq-upload-button-selector qq-upload-button" style="float: right">\n                <div>选择文件</div>\n            </div>\n            <span class="qq-drop-processing-selector qq-drop-processing">\n                <span>Processing dropped files...</span>\n                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>\n            </span>\n            <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals" style="display: none">\n                <li>\n                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>\n                    <div class="qq-progress-bar-container-selector qq-progress-bar-container">\n                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>\n                    </div>\n                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>\n                    <div class="qq-thumbnail-wrapper">\n                        <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>\n                    </div>\n                    <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>\n                    <button type="button" class="qq-upload-retry-selector qq-upload-retry">\n                        <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>\n                        Retry\n                    </button>\n\n                    <div class="qq-file-info">\n                        <div class="qq-file-name">\n                            <span class="qq-upload-file-selector qq-upload-file"></span>\n                            <span class="qq-edit-filename-icon-selector qq-btn qq-edit-filename-icon" aria-label="Edit filename"></span>\n                        </div>\n                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">\n                        <span class="qq-upload-size-selector qq-upload-size"></span>\n                        <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">\n                            <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>\n                        </button>\n                        <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">\n                            <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>\n                        </button>\n                        <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">\n                            <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n\n            <dialog class="qq-alert-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">Close</button>\n                </div>\n            </dialog>\n\n            <dialog class="qq-confirm-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">No</button>\n                    <button type="button" class="qq-ok-button-selector">Yes</button>\n                </div>\n            </dialog>\n\n            <dialog class="qq-prompt-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <input type="text">\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">Cancel</button>\n                    <button type="button" class="qq-ok-button-selector">Ok</button>\n                </div>\n            </dialog>\n        </div>\n    <\/script>')},BuildUploadContainer:function(){if(this._prop.uploadEnable){var e=this._prop.$singleControlElem,t="uploadWarp_"+this._prop.elemId;this._prop.uploadWarpId=t;var n=$("<div id='"+t+"'></div>");e.append(n);var a="qq-template_"+this._prop.elemId;"defaultTemplate"==this._prop.useTemplate&&this.CreateDefaultTemplate(a);var i=this;new qq.FineUploader({element:n[0],template:a,multiple:!1,request:this.GetUploadEndPointRequest(),callbacks:{onComplete:function(e,t,n,a){n.success?i.BuildFileList():DialogUtility.AlertText(n.message)}}})}},BuildFileList:function BuildFileList(){var $singleControlElem=this._prop.$singleControlElem,upload_file_list_wrap_id="upload_file_list_warp_"+this._prop.elemId;$("#"+upload_file_list_wrap_id).remove();var $divWarp=$("<div class='upload_file_list_wrap' id='"+upload_file_list_wrap_id+"'><table class='file_list_table'><thead><tr><th style='width: 80px'>编号</th><th>文件名称</th><th style='width: 140px'>上传时间</th><th style='width: 140px'>上传人</th><th style='width: 140px'>文件大小</th><th style='width: 140px'>操作</th></tr></thead><tbody></tbody></table></div>"),$tbody=$divWarp.find("tbody"),objId=eval(this._prop.getBindRecordIdJsMethod),category=this._prop.categoryType;AjaxUtility.Post(this.acInterface.getFileListData,{objId:objId,categoryType:category},function(e){if(e.success)for(var t=0;t<e.data.length;t++){var n=e.data[t];$tbody.append(this.BuildFileInfoTableRow(e,n))}BaseUtility.IsViewOperation(formRuntimeInst.GetOperationType())&&this.ToViewStatus()},this),$($singleControlElem.append($divWarp))},BuildFileInfoTableRow:function(e,t){var n=t.fileCode,a=StringUtility.EncodeHtml(t.fileName),i=DateUtility.DateFormatByTimeStamp(t.fileCreateTime,"yyyy-MM-dd"),r=HardDiskUtility.ByteConvert(t.fileSize),o=StringUtility.EncodeHtml(t.fileCreatorName),l=$('<tr><td style="text-align: center">'.concat(n,"</td><td>").concat(a,'</td><td style="text-align: center">').concat(i,'</td><td style="text-align: center">').concat(o,'</td><td style="text-align: center">').concat(r,'</td><td style="text-align: center"></td></tr>'));return this.BuildFileInfoTableRowInnerButtons(e,t,l),l},BuildFileInfoTableRowInnerButtons:function(e,t,n){!this._prop.downloadEnable&&!this._prop.deleteEnable&&this._prop.previewEnable&&this._prop.moveOrderEnable;var a=n.find("td:last"),i=this;if(this._prop.deleteEnable){var r=$("<div class='file-list-inner-button delete-button-elem' title='点击删除'></div>");r.click(function(){DialogUtility.Confirm(window,"确认删除附件【"+t.fileName+"】吗?",function(){AjaxUtility.Post(i.acInterface.deleteFile,{fileId:t.fileId},function(e){e.success&&r.parent().parent().remove()},i)})}),a.append(r)}this._prop.moveOrderEnable;var o=$("<div class='file-list-inner-button move-up-button-elem' title='点击上移'></div>");o.click(function(){DialogUtility.AlertText("暂不支持!")});var l=$("<div class='file-list-inner-button move-down-button-elem' title='点击下移'></div>");if(l.click(function(){DialogUtility.AlertText("暂不支持!")}),a.append(o),a.append(l),this._prop.downloadEnable){var s=$("<div class='file-list-inner-button download-button-elem' title='点击下载'></div>");s.click(function(){var e=BaseUtility.GetRootPath()+i.acInterface.downloadFile+"?fileId="+t.fileId;window.open(e)}),a.append(s)}this._prop.previewEnable;var d=$("<div class='file-list-inner-button preview-button-elem' title='点击预览'></div>");d.click(function(){DialogUtility.AlertText("暂不支持!")}),a.append(d)},TestFilePreviewEnable:function(e){return!0}},WFDCT_OpinionInput_Demo_Data={opinions:[{id:"11111111111111111",userId:"1",userName:"庄锐波",organId:"",organName:"",inputOpinion:"这只是一个测试客户端，所以不能保证这一改变一定会出现在Steam的正式版本中",inputTime:DateUtility.GetCurrentTimeString(),indexNum:0,status:"",formClient:""},{id:"222222222222222",userId:"Shi_Ming_Hua_UID",userName:"石明华",organId:"",organName:"",inputOpinion:"这只是一个测试客户端",inputTime:DateUtility.GetCurrentTimeString(),indexNum:1,status:"",formClient:""}]},WFDCT_OpinionInput={_prop:{elemId:"",clientInstanceName:"",$singleControlElem:null,mySession:null,$rootElem:null,$oldOpinionListWrapElem:null,$newOpinionInputWrapElem:null,$newOpinionInputElem:null,oldOpinionsData:{opinions:[]}},InitializeAtInstance:function(e,t,n){this._prop.elemId=n,this._prop.clientInstanceName=t},RendererChain:function(e){var t=e.$singleControlElem;this._prop.$singleControlElem=t,this._prop.mySession=e.po.mySession;var n=StringUtility.Timestamp(),a=$("<div class='wfdct-opinion-input-outer-wrap'>\n                                <div class='wfdct-old-opinions-list-wrap'></div>\n                                <div class='wfdct-new-opinion-input-wrap'>\n                                    <textarea newOpinionId=\"".concat(n,'"></textarea>\n                                </div>\n                          </div>'));this._prop.$rootElem=a,this._prop.$singleControlElem.html("").append(this._prop.$rootElem),this._prop.$newOpinionInputElem=this._prop.$rootElem.find(".wfdct-new-opinion-input-wrap textarea"),this._prop.$oldOpinionListWrapElem=this._prop.$rootElem.find(".wfdct-old-opinions-list-wrap")},RendererDataChain:function(){},GetValue:function(e,t,n){var a=this._prop.$newOpinionInputElem.attr("newOpinionId");if(ArrayUtility.NotExist(this._prop.oldOpinionsData.opinions,function(e){return e.id==a})){var i=this._prop.$newOpinionInputElem.val();if(!StringUtility.IsNullOrEmpty(i)){var r=this.BuildNewOpinion(this._prop.mySession,a,i,this._prop.oldOpinionsData.opinions.length+1);this._prop.oldOpinionsData.opinions.push(r)}}return t.value=JsonUtility.JsonToString(this._prop.oldOpinionsData),t},SetValue:function(e,t,n,a){var o=this,l={opinions:[]},s=this;t&&t.value&&(l=JsonUtility.StringToJson(t.value)),this._prop.oldOpinionsData=l;for(var i=function(e){var t=l.opinions[e],n=$("<div class='wfdct-old-opinions-single-wrap' opinion='"+t.id+"'><div class='wfdct-old-opinion-text'></div><div class='wfdct-old-opinion-userinfo'></div></div>"),a=t.inputOpinion,i=t.userName+"【"+t.inputTime+"】";if(t.userId==o._prop.mySession.userId){var r=$("<div class='wfdct-old-opinion-delete' title='删除'><i class=\"las la-times-circle\"></i></div>");r.click(function(){WFDCT_OpinionInput.DeleteOpinion.call(s,t.id)}),n.prepend(r)}n.find(".wfdct-old-opinion-text").html(a),n.find(".wfdct-old-opinion-userinfo").html(i),o._prop.$oldOpinionListWrapElem.append(n)},r=0;r<l.opinions.length;r++)i(r)},BuildNewOpinion:function(e,t,n,a){return{id:t,userId:e.userId,userName:e.userName,organId:e.organId,organName:e.organName,inputOpinion:n,inputTime:DateUtility.GetCurrentTimeString(),indexNum:a,status:"general",formClient:"webClient"}},DeleteOpinion:function(t){DialogUtility.Confirm(window,"您确认要删除该意见吗?",function(){this._prop.$oldOpinionListWrapElem.find("[opinion='"+t+"']").remove(),this._prop.oldOpinionsData&&this._prop.oldOpinionsData.opinions&&0<this._prop.oldOpinionsData.opinions.length&&ArrayUtility.DeleteWhere(this._prop.oldOpinionsData.opinions,function(e){return e.id==t})},this)},SetNewValue:function(e){this._prop.$newOpinionInputElem.val(e)},ToViewStatus:function(e,t,n,a){this._prop.$newOpinionInputElem.hide(),$(".wfdct-old-opinion-delete").hide()}},WFDCT_RadioGroup={radioGroupName:"",radioGroupWrapId:"",level2BindControlId:"",InitStyle:HTMLControl.InitStyle,RendererChain:function(e){var t=e.$singleControlElem,n=decodeURIComponent(t.attr("datasource"));n=JsonUtility.StringToJson(n);t.hide();var a=t.attr("defaultselected");this.radioGroupName="radioGroupName_"+t.attr("id"),this.radioGroupWrapId="radioGroupWrap_"+t.attr("id"),this.level2BindControlId=t.attr("level2bindcontrolid"),$("#"+this.radioGroupWrapId).remove();for(var i=$("<div class='radioGroupContainer' id='"+this.radioGroupWrapId+"' style='margin: 4px 0px;' />"),r=t.attr("rownum"),o=this,l=0;l<n.length;l++){var s=n[l],d=s.ITEXT,u=s.IVALUE,c=!1;if(0!=l&&1<r?c=l%r==0:1==r&&(c=!0),"--请选择--"!=d){var f=this.radioGroupName+"_"+l,h=$("<input type='radio' name='"+this.radioGroupName+"' id='"+f+"' />");h.val(u),u==a&&h.prop("checked",!0),i.append(h),i.append("<label for='"+f+"' style='margin-right: 8px'>"+d+"</label>"),c&&i.append("<br />"),this.Is2LevelDD()&&h.change(function(){var e=$(this).val();o.TryBind2LevelDD(t,e)})}}t.after(i)},RendererDataChain:function(){},GetValue:function(e,t,n){return t.value=$("[name='"+this.radioGroupName+"']:checked").val(),null==t.value&&(t.value=""),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value),$("[name='"+this.radioGroupName+"'][value='"+t.value+"']").prop("checked",!0),t.value&&this.TryBind2LevelDD(e,t.value))},ToViewStatus:function(e,t,n,a){$("[name='"+this.radioGroupName+"']").parent().remove();var i=BaseUtility.GetElemAllAttr(e),r=$("<label />");r.attr(i),r.removeClass(),r.show(),r.text(e.val()),e.replaceWith(r)},Is2LevelDD:function(){return StringUtility.IsNotNullOrEmpty(this.level2BindControlId)},TryBind2LevelDD:function(e,t){var n=e.attr("level2bindcontrolid");if(n){var a=decodeURIComponent(e.attr("datasourcealllevel"));a=JsonUtility.StringToJson(a);var i=ArrayUtility.Where(a,function(e){return e.PARENTVALUE==t}),r=$("#"+n),o=JsonUtility.JsonToString(i);r.attr("datasource",o),HTMLControl.GetControlInstanceByElem(r).RendererChain({$singleControlElem:r})}}},WFDCT_SelectOrganUser={acInterface:{getOrganTreeData:"/Rest/Builder/RunTime/OrganRuntime/GetFullEnableOrgan",reloadListData:"/Rest/Builder/RunTime/UserRuntime/GetUserByOrganId"},treeConfig:{treeIdFieldName:"organId",treeObj:null,treeSelectedNode:null,treeSetting:{async:{enable:!0,url:""},data:{key:{name:"organName"},simpleData:{enable:!0,idKey:"organId",pIdKey:"organParentId"}},callback:{onClick:function(e,t,n){this.getZTreeObj(t)._host.SelectedOrganNode(e,t,n)},onAsyncSuccess:function(e,t,n,a){}}}},userConfig:{userWarpElemObj:null},selectedUser:{data:[]},_objectType:"Instance",_prop:{buttonId:null,buttonText:null,multipleSplit:null,resultNameBindToControlField:null,resultValueBindToControlField:null,resultNameBindToControlId:null,resultValueBindToControlId:null,selectCondition:null,windowCaption:null,selectNumber:null,settingType:null,defaultSelectedOrganId:null,containerId:null,singleSelectAutoClose:null},RendererChain:function(e){var t=e.$singleControlElem,n=t.attr("buttontext");t.text(n),t.css({padding:"2px 6px"}),t.bind("click",{buttonElem:t,selfInstance:this},this.ClickEvent)},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,BuildContentHTML:function(e,n){var t="dialogContainer_"+e,a=t+"_userWrap",i="treeULId_"+e;if(0==$("#"+t).length){var r="<div id='".concat(t,'\' class="select_organ_user_wrap">\n                    <div class="left_tree_wrap"><ul ref="zTreeUL" class="ztree" id="').concat(i,'"></ul></div>\n                    <div class="right_selected_wrap" id="').concat(a,'"></div>\n                    <div class="buttons_outer_wrap"><div class="buttons_inner_wrap"><button class="button button-primary" name="btnEnsure">确认</button><button class="button" name="btnClose">关闭</button><button class="button" name="btnClear">清空选择</button></div></div>\n                </div>'),o=$(r);o.hide(),$(document.body).append(o);var l=this;o.find("[name='btnEnsure']").click(function(){l.EnsureClickEvent()}),o.find("[name='btnClose']").click(function(){l.CloseClickEvent()}),o.find("[name='btnClear']").click(function(){l.ClearClickEvent()}),this.userConfig.userWarpElemObj=o.find("#"+a),AjaxUtility.Post(this.acInterface.getOrganTreeData,{},function(e){if(e.success){if(console.log(e),this.treeConfig.treeObj=$.fn.zTree.init($("#"+i),this.treeConfig.treeSetting,e.data),this.treeConfig.treeObj.expandAll(!0),this.treeConfig.treeObj._host=this,!StringUtility.IsNullOrEmpty(n)){var t=this.treeConfig.treeObj.getNodeByParam("organId",n,null);this.treeConfig.treeObj.selectNode(t),this.BuildUserTable(n)}}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,function(){})},this)}return t},ClearUserTable:function(){this.userConfig.userWarpElemObj.html("")},BuildUserTable:function(e){AjaxUtility.Post(this.acInterface.reloadListData,{organId:e},function(e){if(e.success){console.log(e);this.ClearUserTable();for(var t=$('<table class="userTable"><tr><th style="width: 40px">选择</th><th style="width: 80px">姓名</th><th style="width: 100px">手机号码</th><th>备注</th></tr></table>'),n=0;n<e.data.length;n++){var a=e.data[n],i=a.userId,r=StringUtility.EncodeHtml(a.userName),o=StringUtility.EncodeHtml(a.userPhoneNumber?a.userPhoneNumber:""),l=StringUtility.EncodeHtml(a.userDesc?a.userDesc:""),s="cbx_user_"+i,d=this._prop.selectNumber,u=this.TestUserIsSelected(a),c=$('<tr><td style="text-align: center"><input type="checkbox" id="'.concat(s,'" /></td><td style="text-align: center">').concat(r,'</td><td style="text-align: center">').concat(o,"</td><td>").concat(l,"</td></tr>"));c.bind("click",{selfInstance:this,userData:a,userId:i,userName:r,checkBoxId:s,selectNumber:d},this.UserClickEvent),c.find("#"+s).bind("click",{selfInstance:this,userData:a,userId:i,userName:r,checkBoxId:s,selectNumber:d},this.UserClickEvent),u&&c.find("#"+s).prop("checked",!0),t.find("tbody").append(c)}this.userConfig.userWarpElemObj.append(t)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,function(){})},this)},SelectedOrganNode:function(e,t,n){console.log(n),this.BuildUserTable(n.organId)},UnCheckAllUserExclude:function(e){this.userConfig.userWarpElemObj.find("input[type='checkbox'][id!='"+e+"']").prop("checked",!1)},ClearSelectedUser:function(){this.selectedUser.data=[]},AddUserToSelectedData:function(e,t){"single"==e?(this.ClearSelectedUser(),this.selectedUser.data.push(t)):"multiple"==e&&this.selectedUser.data.push(t)},DeleteUserToSelectedData:function(e,t){for(var n=0;n<this.selectedUser.data.length;n++)this.selectedUser.data[n].userId==t.userId&&ArrayUtility.Delete(this.selectedUser.data,n)},TestUserIsSelected:function(e){if(0<this.selectedUser.data.length)for(var t=0;t<this.selectedUser.data.length;t++)if(this.selectedUser.data[t].userId==e.userId)return!0;return!1},UserClickEvent:function(e){var t=e.data.selfInstance,n=e.data.userData,a=(e.data.userId,e.data.userName,e.data.checkBoxId),i=e.data.selectNumber;"single"==i&&t.UnCheckAllUserExclude(a),$("#"+a).prop("checked")?($("#"+a).prop("checked",!1),t.DeleteUserToSelectedData(i,n)):($("#"+a).prop("checked",!0),t.AddUserToSelectedData(i,n)),1==t.selectedUser.data.length&&"true"==t._prop.singleSelectAutoClose&&t.EnsureClickEvent(),e.stopPropagation()},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance;n._prop.buttonId=t.attr("id");n._prop.containerId=n.BuildContentHTML(n._prop.buttonId,n._prop.defaultSelectedOrganId),DialogUtility.DialogElem(n._prop.containerId,{width:700,height:500,title:n._prop.windowCaption,modal:!0},1,!0)},BuildSelectedName:function(){for(var e=[],t=0;t<this.selectedUser.data.length;t++)e.push(this.selectedUser.data[t].userName);return e.join(this._prop.multipleSplit)},BuildSelectedValue:function(){for(var e=[],t=0;t<this.selectedUser.data.length;t++)e.push(this.selectedUser.data[t].userId);return e.join(this._prop.multipleSplit)},EnsureClickEvent:function(){var e=this._prop;"bingToControl"==e.settingType&&(e.resultNameBindToControlId&&$("#"+e.resultNameBindToControlId).val(this.BuildSelectedName()),e.resultValueBindToControlId&&$("#"+e.resultValueBindToControlId).val(this.BuildSelectedValue()),e.resultNameBindToControlField,e.resultValueBindToControlField),this.BindResultTo(this.BuildSelectedValue(),this.BuildSelectedName()),this.CloseClickEvent()},CloseClickEvent:function(){DialogUtility.CloseByElemId(this._prop.containerId)},ClearClickEvent:function(){this.ClearSelectedUser(),this.UnCheckAllUserExclude("not"),this.BindResultTo("",""),this.CloseClickEvent()},BindResultTo:function(e,t){var n=this._prop;"bingToControl"==n.settingType&&(n.resultNameBindToControlId&&$("#"+n.resultNameBindToControlId).val(t),n.resultValueBindToControlId&&$("#"+n.resultValueBindToControlId).val(e),n.resultNameBindToControlField,n.resultValueBindToControlField)}},WFDCT_SimpleLabel={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:function(e,t,n){return t.value=e.text(),t},SetValue:function(e,t,n,a){if(t){var i=e.attr("defformat");if("yyyy-MM-dd"==i){var r=t.value;if(r){var o=DateUtility.ConvertFromString(r);r=DateUtility.Format(o,i)}e.text(r),e.attr("control_value",r),e.attr("control_source_value",t.value)}else e.text(t.value),e.attr("control_value",t.value),e.attr("control_source_value",t.value)}}},WFDCT_SubFormListContainer={_AddButtonElem:null,_$TemplateTableRow:null,_$SingleControlElem:null,_$TableElem:null,_$TableHeadElem:null,_$TableBodyElem:null,_EditInRow:!0,_Display_OPButtons_Add:!0,_Display_OPButtons_Update:!0,_Display_OPButtons_Del:!0,_Display_OPButtons_View:!0,_FormRuntimeHost:null,_FormDataRelationList:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t,this._$TableElem=this._$SingleControlElem.find("table"),this._$TableBodyElem=this._$TableElem.find("tbody"),this._$TableHeadElem=this._$TableElem.find("thead"),this._EditInRow="false"!=t.attr("editinrow"),this._FormRuntimeHost=e.formRuntimeInstance,this._FormDataRelationList=this._FormRuntimeHost._FormDataRelationList;var n=t.attr("opbuttons");this._Display_OPButtons_Add=0<=n.indexOf("add"),this._Display_OPButtons_Update=0<=n.indexOf("update"),this._Display_OPButtons_Del=0<=n.indexOf("delete"),this._Display_OPButtons_View=0<=n.indexOf("view");t.html();var a=t.find("table[is_template_table='true']");a.addClass("sub-form-list-table"),t.html(""),this._AddButtonElem=$("<div class='sflb-button sflb-add' title='新增'>新增</div>"),this._Display_OPButtons_Add&&t.prepend("<div class='sub-form-list-button-wrap'></div>").find("div").append(this._AddButtonElem),(this._Display_OPButtons_Del||this._Display_OPButtons_Update||this._Display_OPButtons_View)&&this._$TableHeadElem.find("tr").append("<th style='width: 120px'>操作</th>"),t.append(a);var i=HTMLControl.GetControlInstanceNameByElem(t);this._AddButtonElem.bind("click",{hostElem:t,_rendererChainParas:e,selfObj:this,instanceName:i},this.AddEvent),this._$TemplateTableRow=t.find("table tbody tr").clone(),t.find("table tbody tr").remove();var r=this.ValidateRendererChainEnable();r.success||DialogUtility.AlertText(r.msg);var o=this.TryGetRelationPOClone();t.attr("relation_po_id",o.id)},RendererDataChain:function(e){for(var t=e.$singleControlElem,n=e.relationFormRecordComplexPo,a=t.attr("relation_po_id"),i=FormRelationPOUtility.FindRelationPOInRelationFormRecordComplexPo(n,a),r=FormRelationPOUtility.Get1ToNDataRecord(i),o=0;o<r.length;o++){var l=r[o];if(this._EditInRow)this.InnerRow_AddRowToContainer(l,i.pkFieldName);else{var s=ArrayUtility.WhereSingle(n.formRecordDataRelationPOList,function(e){return e.parentId==a}),d=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.parentId==a});if(s){for(var u=s.selfKeyFieldName,c=s.outerKeyFieldName,f=FormRelationPOUtility.FindFieldValueInOneDataRecord(l,c),h=JsonUtility.CloneSimple(d),p=FormRelationPOUtility.Get1ToNDataRecord(s),m=[],T=0;T<p.length;T++){var g=p[T],_=FormRelationPOUtility.FindRecordFieldPOArray(g);ArrayUtility.True(_,function(e){return e.fieldName==u&&e.value==f})&&m.push(g)}FormRelationPOUtility.Add1ToNDataRecord(h,m),[].push(h)}this.Dialog_AddRowToContainer(l,!0,i.pkFieldName)}}this.InnerRow_CompletedLastEdit()},SerializationValue:function(e,t,n){this.InnerRow_CompletedLastEdit();for(var a=[],i=this._$SingleControlElem.find("tr[is_sub_list_tr='true']"),r=this.TryGetRelationPOClone(),o=0;o<i.length;o++){var l=$(i[o]),s=this.GetRowData(l),d=FormRelationPOUtility.Get1To1DataRecord(s),u=FormRelationPOUtility.FindFieldPOInOneDataRecord(d,r.pkFieldName).value,c=this.TryBuildRecord(s,u,d.recordFieldPOList);a.push(c)}console.log(a),this._EditInRow||(t.isSave=!1),FormRelationPOUtility.Add1ToNDataRecord(t,a)},GetValue:function(e,t,n){DialogUtility.AlertText("DynamicContainer类型的控件的序列化交由SerializationValue方法自行完成!")},SetValue:function(e,t,n){},ToViewStatus:function(e,t,n){e.find(".sub-form-list-button-wrap").hide(),e.find(".sflt-td-operation-update").hide(),e.find(".sflt-td-operation-del").hide()},AddEvent:function(e){var t=e.data.hostElem,n=e.data.selfObj,a=e.data.instanceName,i=e.data._rendererChainParas;n._EditInRow?n.InnerRow_AddRowToContainer(null,null):n.Dialog_ShowAddRowSubFormDialog(e,t,i,a)},ValidateSerializationSubFormDataEnable:function(e){return!0},ValidateRendererChainEnable:function(){return{success:!0,msg:""}},GetRowId:function(e){return e.attr("tr_record_id")},SetRowId:function(e,t){e.attr("tr_record_id",t)},GetRowData:function(e){var t=e.attr("tr_record_data");return JsonUtility.StringToJson(t)},GetChildRelationPOArray:function(e){var t=e.attr("child_relation_po_array");return StringUtility.IsNullOrEmpty(t)?null:JsonUtility.StringToJson(t)},SaveDataToRowAttr:function(e,t,n){t.attr("is_sub_list_tr","true"),t.attr("tr_record_id",FormRelationPOUtility.FindFieldPOByRelationPO(e,e.pkFieldName).value),t.attr("tr_record_data",JsonUtility.JsonToString(e)),n&&0<n.length&&t.attr("child_relation_po_array",JsonUtility.JsonToString(n))},TryGetChildRelationPOArrayClone:function(t){var e=ArrayUtility.Where(this._FormDataRelationList,function(e){return e.parentId==t.id});return JsonUtility.CloneArraySimple(e)},TryGetRelationPOClone:function(){if(this._po)return JsonUtility.CloneSimple(this._po);var e=this.TryGetBindDataSourceAttr(),t=null;if("autoTesting"==e){var n=this.TryGetInnerControlBindTableName();if(null==(t=FormRelationPOUtility.FindRelationPOByTableName(this._FormDataRelationList,n))){var a="WFDCT_SubFormListContainer.TryGetRelationPO:通过内部控件绑定的表找不到具体的数据关联实体！";throw DialogUtility.AlertText(a),a}}else if(null==(t=FormRelationPOUtility.FindRelationPOById(this._FormDataRelationList,e))){a="WFDCT_SubFormListContainer.TryGetRelationPO:通过ID"+e+"找不到具体的数据关联实体！";throw DialogUtility.AlertText(a),a}return this._po=t,JsonUtility.CloneSimple(this._po)},TryGetInnerControlBindTableName:function(){var e=HTMLControl.FindALLControls(this._$TemplateTableRow),t=null;return e.each(function(){t?t!=HTMLControl.GetControlBindTableName($(this))&&DialogUtility.AlertText("子表区域中的控件绑定了多个表!"):t=HTMLControl.GetControlBindTableName($(this))}),t},TryGetBindDataSourceAttr:function(){return this._$SingleControlElem.attr("binddatasource")},TryBuildRecord:function(t,e,n){var a=t.outerKeyFieldName,i=t.selfKeyFieldName,r="",o=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==t.parentId});if(StringUtility.IsNullOrEmpty(a)){var l="数据源未设置外键关联字段!";throw DialogUtility.AlertText(l),l}if(StringUtility.IsNullOrEmpty(i)){l="数据源未设置本身关联字段!";throw DialogUtility.AlertText(l),l}if(FormRelationPOUtility.IsMainRelationPO(o))r=this._FormRuntimeHost.GetRecordId();else{var s=o.tableId,d=HTMLControl.GetSimpleControlValue(s,a);if(StringUtility.IsNullOrEmpty(d)){l="找不到绑定了表:"+s+",字段:"+a+"的控件,请确认页面放置了该控件,并存在值!";throw DialogUtility.AlertText(l),l}}return FormRelationPOUtility.BuildRecord(n,"",e,a,r,i)},_$LastEditRow:null,InnerRow_AddRowToContainer:function(e,t){this.InnerRow_CompletedLastEdit();var n=this._$TemplateTableRow.clone(),a=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),i=a.find("div"),r=$("<div title='删除' class='sflt-td-operation-del'></div>");r.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_Delete($(this).parent().parent().parent())}),i.append(r);var o=$("<div title='编辑' class='sflt-td-operation-update'></div>");o.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_ToEditStatus($(this).parent().parent().parent())}),i.append(o),n.append(a),this._$TableBodyElem.append(n),this._$LastEditRow=n;for(var l=HTMLControl.FindALLControls(this._$LastEditRow),s=0;s<l.length;s++){var d=$(l[s]),u=HTMLControl.GetControlInstanceByElem(d),c=HTMLControl.GetControlBindFieldName(d);u.RendererChain({$singleControlElem:d})}if(e){for(l=HTMLControl.FindALLControls(this._$LastEditRow),s=0;s<l.length;s++){d=$(l[s]),u=HTMLControl.GetControlInstanceByElem(d),c=HTMLControl.GetControlBindFieldName(d);var f=FormRelationPOUtility.FindFieldPOInOneDataRecordEnableNull(e,c);u.SetValue(d,f,null,null)}var h=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,t).value;this.SetRowId(n,h)}},InnerRow_ToEditStatus:function(e){this.InnerRow_CompletedLastEdit();for(var t=this.GetRowData(e),n=e.find("[is_inner_row_span='true']"),a=0;a<n.length;a++){var i=$(n[a]),r=i.attr("edit_control_id"),o=this._$TemplateTableRow.find("#"+r).clone(),l=HTMLControl.GetControlBindFieldName(o),s=FormRelationPOUtility.FindFieldPOByRelationPO(t,l);HTMLControl.GetControlInstanceByElem(o).SetValue(o,s,{}),i.parent().append(o),i.remove()}this._$LastEditRow=e},InnerRow_ToViewStatus:function(e,t){if(this._$LastEditRow)for(var n=HTMLControl.FindALLControls(this._$LastEditRow),a=0;a<n.length;a++){var i=$(n[a]),r=HTMLControl.GetControlBindFieldName(i),o=FormRelationPOUtility.FindFieldPOByRelationPO(e,r).value,l=$("<span is_inner_row_span='true' edit_control_id='"+i.attr("id")+"'>"+o+"</span>");i.before(l),i.remove()}this._$LastEditRow=null},InnerRow_Delete:function(a){this.InnerRow_CompletedLastEdit(),console.log(this._FormRuntimeHost),this._FormRuntimeHost._Prop_Config.OperationType!=BaseUtility.GetAddOperationName()?DialogUtility.Confirm(window,"确认删除当前记录?",function(){var e=this.GetRowData(a);console.log(e);var t=e.oneDataRecord.recordId,n=e.tableId;RuntimeGeneralInstance.DeleteTableRecord(n,t,function(e){a.remove()},this)},this):a.remove()},InnerRow_CompletedLastEdit:function(){if(this._$LastEditRow){for(var e=HTMLControl.FindALLControls(this._$LastEditRow),t=this.TryGetRelationPOClone(),n=[],a=0;a<e.length;a++){var i=$(e[a]),r=HTMLControl.TryGetFieldTransferPO(i,t.id,t.singleName,t.relationType);n.push(r)}var o=this.GetRowId(this._$LastEditRow);o||(o=StringUtility.Guid()),FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(n,o,this._FormRuntimeHost._FormPO,t.tableId);var l=this.TryBuildRecord(t,o,n);t=FormRelationPOUtility.Add1To1DataRecordFieldPOList(t,n,"",l.recordId,l.outerFieldName,l.outerFieldValue,l.selfFieldName),this.SaveDataToRowAttr(t,this._$LastEditRow),this.InnerRow_ToViewStatus(t,this._$LastEditRow)}},Dialog_Get_Button_Click_Para:function(e){var t=this.TryGetRelationPOClone();return console.log("子表外键:"+t.outerKeyFieldName),{formId:e.attr("formid"),buttonId:"",elemId:"",recordId:"",windowHeight:e.attr("windowheight"),windowWidth:e.attr("windowwidth"),instanceName:e.attr("client_instance_name"),dialogWindowTitle:e.attr("dialogwindowtitle"),parentRecordId:this._FormRuntimeHost.GetRecordId(),selfKeyFieldName:t.selfKeyFieldName,outerKeyFieldName:t.outerKeyFieldName}},Dialog_AddRow_AddViewButton:function(e,t,n,a,i,r){var o=$("<div title='查看' class='sflt-td-operation-view'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:n,oneDataRecord:a,dialogWindowPara:l,isPreview:r},function(e){var t,n=e.data.dialogWindowPara;n.OperationType="view",n.recordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",n):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",n),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:n.dialogWindowTitle,width:n.windowWidth,height:n.windowHeight},1)}),e.append(o)},Dialog_AddRow_AddUpdateButton:function(e,t,n,a,i,r){var o=$("<div title='编辑' class='sflt-td-operation-update'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:n,oneDataRecord:a,dialogWindowPara:l,isPreview:r},function(e){var t,n=e.data.dialogWindowPara;n.operationType="update",n.recordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",n):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",n),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:n.dialogWindowTitle,width:n.windowWidth,height:n.windowHeight},1)}),e.append(o)},Dialog_AddRow_AddDeleteButton:function(e,t,n,a,i,r){var o=$("<div title='删除' class='sflt-td-operation-del'></div>");o.bind("click",{$tr:t,idValue:n,oneDataRecord:a,isPreview:r},function(e){e.data.$tr.remove()}),e.append(o)},Dialog_ShowAddRowSubFormDialog:function(e,t,n,a){var i,r=this.Dialog_Get_Button_Click_Para(t);r.dialogWindowTitle||(r.dialogWindowTitle="应用构建系统"),r.operationType="add",r.recordId=StringUtility.Guid(),i=this._FormRuntimeHost.IsPreview()?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",r):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",r),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,i,{title:r.dialogWindowTitle,width:r.windowWidth,height:r.windowHeight},1)},Dialog_SubFormDialogCompletedEdit:function(e,t,n){var a=HTMLControl.GetInstance(e);(function(e,t){var n=FormRelationPOUtility.FindMainRelationPO(t.formRecordDataRelationPOList),a=FormRelationPOUtility.Get1To1DataRecord(n);this.Dialog_AddRowToContainer(a,!1,n.pkFieldName)}).call(a,t,n)},Dialog_AddRowToContainer:function(e,t,n){if(e){for(var a=this._$TemplateTableRow.clone(),i=HTMLControl.FindALLControls(a),r=0;r<i.length;r++){var o=$(i[r]),l=HTMLControl.GetControlInstanceByElem(o),s=HTMLControl.GetControlBindFieldName(o),d=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,s);l.SetValue(o,d,null,null)}console.log(n);var u=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,n),c=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),f=c.find("div");t?(this._Display_OPButtons_View&&this.Dialog_AddRow_AddViewButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Update&&this.Dialog_AddRow_AddUpdateButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Del&&this.Dialog_AddRow_AddDeleteButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())):(this.Dialog_AddRow_AddViewButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddUpdateButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddDeleteButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())),a.append(c);var h=u.value,p=this._$SingleControlElem.find("tr[tr_record_id='"+h+"']");0==p.length?this._$TableBodyElem.append(a):(p.after(a),p.remove());var m=this.TryGetRelationPOClone();m=FormRelationPOUtility.Add1To1DataRecord(m,e),this.SaveDataToRowAttr(m,a)}}},WFDCT_TabContainer={RendererChain:function RendererChain(_rendererChainParas){try{var $tabber=_rendererChainParas.$singleControlElem;$tabber.hide();for(var $labers=$tabber.children("[tab_id]"),$ul=$("<ul></ul>"),j=0;j<$labers.length;j++){var $laber=$($labers[j]);$ul.append("<li><a href='#"+$laber.attr("tab_id")+"'>"+$laber.text()+"</a><li>")}$labers.remove(),$tabber.prepend($ul),$("#"+$tabber.attr("id")).tabs({activate:function activate(event,ui){var newTabOnActivity=ui.newPanel.attr("onActivity");newTabOnActivity&&eval(newTabOnActivity+"(event,ui)"),console.log(ui),console.log(event)}}),$tabber.show()}catch(e){throw"WFDCT_TabContainer.RendererChain:"+e}HTMLControl.RendererChain(_rendererChainParas)},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue},WFDCT_TextArea={RendererChain:function(e){},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus},WFDCT_TextBox={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){e.$singleControlElem.attr("autocomplete","off")},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_TextDateTime={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){e.$singleControlElem.attr("autocomplete","off")},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:function(e,t,n,a){if(t){var i=t.value,r=DateUtility.ConvertFromString(i);i=DateUtility.Format(r,e.attr("datetimeformat")),e.val(i),e.attr("control_value",i),e.attr("control_time_value",t.value)}},ToViewStatus:HTMLControl.ToViewStatus},WLDCT_DeleteButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("id")),i=(t.attr("buttonid"),t.attr("opentype"),t.attr("operation")),r=(t.attr("singlename"),t.attr("windowcaption"),t.attr("client_resolve"),t.attr("isconfirm")),o=(t.attr("deletetableat"),t.attr("deletetype"),t.attr("confirmfield"),t.attr("confirmformat"),t.attr("binddatasetid")),l="";if("delete"==i){var s=n._ListTableContainerInstance.GetCheckedRecord();if(0==s.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<s.length)return void DialogUtility.AlertText("一次只能操作一条记录!");l=s[0].Id}"TRUE"==StringUtility.toUpperCase(r)&&DialogUtility.Confirm(window,"您确认要删除吗?",function(){RuntimeGeneralInstance.DeleteDataSetRecord(a,o,l,this)},this)}},WLDCT_FormButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("formcode"),t.attr("formid")),i=(t.attr("formmoduleid"),t.attr("formmodulename"),t.attr("formname"),t.attr("id")),r=t.attr("buttonid"),o=(t.attr("innerbuttonjsonstring"),t.attr("opentype"),t.attr("operation")),l=(t.attr("singlename"),t.attr("windowcaption")),s=t.attr("windowheight"),d=t.attr("windowwidth"),u=(t.attr("client_resolve"),"");if("update"==o||"view"==o){var c=n._ListTableContainerInstance.GetCheckedRecord();if(0==c.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<c.length)return void DialogUtility.AlertText("一次只能操作一条记录!");u=c[0].Id}var f=BaseUtility.GetUrlParaValue("menuRightUrlPara");DialogUtility.Frame_OpenIframeWindow(window,DialogUtility.DialogId,BaseUtility.BuildView("/JB4DCBuilderClient/HTML/Builder/Runtime/WebFormRuntime.html",{formId:a,buttonId:r,listFormButtonElemId:i,recordId:u,operationType:o,windowWidth:d,windowHeight:s,menuRightUrlPara:f}),{width:d,height:s,title:l},1,!0)}},WLDCT_ListButtonContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},RendererChain:function RendererChain(_rendererChainParas){var $singleControlElem=_rendererChainParas.$singleControlElem,$buttonDivElemList=$singleControlElem.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);$singleControlElem.find("[is-op-button-wrap-table='true']").hide();for(var innerWrap=$singleControlElem.find(".wldct-list-button-inner-wrap"),innerInsideWrapDiv=$("<div class='wldct-list-button-inner-inside-wrap' />"),i=0;i<$buttonDivElemList.length;i++){var $buttonElem=$($buttonDivElemList[i]),clientResolveName=$buttonElem.attr(HTMLControlAttrs.CLIENT_RESOLVE),clientResolveObject=Object.create(eval(clientResolveName)),$resolvedElem=clientResolveObject.ResolveSelf({sourceHTML:_rendererChainParas.sourceHTML,$rootElem:_rendererChainParas.$rootElem,$parentControlElem:$singleControlElem,$singleControlElem:$buttonElem,allData:_rendererChainParas.allData});innerInsideWrapDiv.append($resolvedElem)}innerWrap.append(innerInsideWrapDiv),innerWrap.append('<div style="clear: both;"></div>'),("disable"==this._prop.status||RuntimeGeneralInstance.TryGetUrlParaViewOnly())&&$singleControlElem.hide()},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListComplexSearchContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},_$SingleControlElem:null,_$ComplexSearchButton:null,_$ClearButton:null,_$CloseButton:null,RendererChain:function(e){var t=e.$singleControlElem;(this._$SingleControlElem=t).hide(),t.find(".wldct-list-complex-search-inner-wrap").height("305px"),t.find(".wldct-list-complex-search-inner-wrap").css("overflow","auto"),t.find(".wldct-list-complex-search-inner-wrap").addClass("div-custom-scroll");var n=$("<div class='wldct-list-complex-search-button-inner-wrap'><div class='button-inner-wrap'></div></div>");this._$ComplexSearchButton=$("<button>查询</button>"),this._$ClearButton=$("<button>清空</button>"),this._$CloseButton=$("<button>关闭</button>"),n.find(".button-inner-wrap").append(this._$ComplexSearchButton).append(this._$ClearButton).append(this._$CloseButton),t.append(n)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){for(var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),n=0;n<t.length;n++){var a=$(t[n]),i=HTMLControl.GetControlInstanceByElem(a).GetValue(a,{}).value;i&&e.push({operator:a.attr("columnoperator"),value:i,tableName:a.attr("columntablename"),fieldName:a.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()}},WLDCT_ListSimpleSearchContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},_$SimpleSearchButton:null,_$ShowComplexSearchButton:null,_$SingleControlElem:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t;var n=PageStyleUtility.GetPageWidth();t.find("table:first").width(n-200);var a=$("<div class='wldct-list-simple-search-button-inner-wrap' />");a.width(160),this._$SimpleSearchButton=$("<button>查询</button>"),this._$ShowComplexSearchButton=$("<button>高级查询</button>"),a.append(this._$SimpleSearchButton),a.append(this._$ShowComplexSearchButton),t.append(a),HTMLControl.RendererChain(e)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),n=this._$SingleControlElem.parent().find("[singlename='WLDCT_HideContainer']").find("[columnname][columnoperator]");$.merge(t,n);for(var a=0;a<t.length;a++){var i=$(t[a]),r=HTMLControl.GetControlInstanceByElem(i).GetValue(i,{}).value;r&&(r=StringUtility.Trim(r))&&e.push({operator:i.attr("columnoperator"),value:r,tableName:i.attr("columntablename"),fieldName:i.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()},HideComplexButton:function(){this._$ShowComplexSearchButton.remove(),this._$SimpleSearchButton.parent().width("80px");var e=PageStyleUtility.GetPageWidth();this._$SingleControlElem.find("table:first").width(e-120)}},WLDCT_ListTableCheckBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.val,n=e.$td;n.css("textAlign","center");var a=$('<input isrow_checkbox="true" type="checkbox" class="list-checkbox-c" value="'+t+'" row_checkbox_record_id="'+t+'">');a.bind("click",{selfInstance:this,$elem:a},this.ClickEvent),n.html(""),n.append(a)},ClickEvent:function(e){var t=e.data.$elem,n=WLDCT_ListTableContainer.__InnerElemGetInstance(t);t.prop("checked")?n.SaveCheckedRowData(t.val()):n.DeleteCheckedRowData(t.val())}},WLDCT_ListTableContainer={GetHTML:function(){return"<table id=\"example\" class=\"stripe row-border order-column\" style=\"width:100%\">\n        <thead>\n            <tr>\n                <th colspan='2'>First name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th colspan='2'>Age</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n            <tr>\n                <th>First name</th>\n                <th>Last name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th>Age</th>\n                <th>Start date</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><a onclick='alert(1)'>Tiger</a></td>\n                <td>Nixon</td>\n                <td>System Architect</td>\n                <td>Edinburgh</td>\n                <td>61</td>\n                <td>2011/04/25</td>\n                <td>$320,800</td>\n                <td>5421</td>\n                <td>t.nixon@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Garrett</td>\n                <td>Winters</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>63</td>\n                <td>2011/07/25</td>\n                <td>$170,750</td>\n                <td>8422</td>\n                <td>g.winters@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Ashton</td>\n                <td>Cox</td>\n                <td>Junior Technical Author</td>\n                <td>San Francisco</td>\n                <td>66</td>\n                <td>2009/01/12</td>\n                <td>$86,000</td>\n                <td>1562</td>\n                <td>a.cox@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Cedric</td>\n                <td>Kelly</td>\n                <td>Senior Javascript Developer</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2012/03/29</td>\n                <td>$433,060</td>\n                <td>6224</td>\n                <td>c.kelly@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Airi</td>\n                <td>Satou</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>33</td>\n                <td>2008/11/28</td>\n                <td>$162,700</td>\n                <td>5407</td>\n                <td>a.satou@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Brielle</td>\n                <td>Williamson</td>\n                <td>Integration Specialist</td>\n                <td>New York</td>\n                <td>61</td>\n                <td>2012/12/02</td>\n                <td>$372,000</td>\n                <td>4804</td>\n                <td>b.williamson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Herrod</td>\n                <td>Chandler</td>\n                <td>Sales Assistant</td>\n                <td>San Francisco</td>\n                <td>59</td>\n                <td>2012/08/06</td>\n                <td>$137,500</td>\n                <td>9608</td>\n                <td>h.chandler@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Rhona</td>\n                <td>Davidson</td>\n                <td>Integration Specialist</td>\n                <td>Tokyo</td>\n                <td>55</td>\n                <td>2010/10/14</td>\n                <td>$327,900</td>\n                <td>6200</td>\n                <td>r.davidson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Colleen</td>\n                <td>Hurst</td>\n                <td>Javascript Developer</td>\n                <td>San Francisco</td>\n                <td>39</td>\n                <td>2009/09/15</td>\n                <td>$205,500</td>\n                <td>2360</td>\n                <td>c.hurst@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Sonya</td>\n                <td>Frost</td>\n                <td>Software Engineer</td>\n                <td>Edinburgh</td>\n                <td>23</td>\n                <td>2008/12/13</td>\n                <td>$103,600</td>\n                <td>1667</td>\n                <td>s.frost@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Jena</td>\n                <td>Gaines</td>\n                <td>Office Manager</td>\n                <td>London</td>\n                <td>30</td>\n                <td>2008/12/19</td>\n                <td>$90,560</td>\n                <td>3814</td>\n                <td>j.gaines@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Quinn</td>\n                <td>Flynn</td>\n                <td>Support Lead</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2013/03/03</td>\n                <td>$342,000</td>\n                <td>9497</td>\n                <td>q.flynn@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n        </tbody>\n    </table>"},_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null},_InstanceMap:{},_CurrentPageNum:1,_DataSet:null,_Cache$SingleControlElem:null,_CacheRendererDataChainParas:null,_SimpleSearchContainerInstance:null,_ComplexSearchContainerInstance:null,_QueryPOList:[],_CheckedRecordArray:[],_$Elem:null,_ListRuntimeInstance:null,GetInstance:function GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},Initialize:function(){},RendererChain:function(e){var t=e.$singleControlElem;this._ListRuntimeInstance=e.listRuntimeInstance;var n=(this._$Elem=t).prevAll("[client_resolve='WLDCT_ListSimpleSearchContainer']"),a=t.prevAll("[client_resolve='WLDCT_ListComplexSearchContainer']");this._SimpleSearchContainerInstance=HTMLControl.GetControlInstanceByElem(n),this._ComplexSearchContainerInstance=HTMLControl.GetControlInstanceByElem(a),this._SimpleSearchContainerInstance._$SimpleSearchButton.bind("click",{listInstance:this},this.SimpleSearchClickEvent),this._SimpleSearchContainerInstance._$ShowComplexSearchButton.bind("click",{listInstance:this},this.ShowComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ComplexSearchButton.bind("click",{listInstance:this},this.ComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ClearButton.bind("click",{listInstance:this},this.ComplexSearchClearClickEvent),this._ComplexSearchContainerInstance._$CloseButton.bind("click",{listInstance:this},this.ComplexSearchCloseClickEvent),"disable"==this._SimpleSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.Hide(),"disable"==this._ComplexSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.HideComplexButton();var i=t.find("table"),r=t.find("table tbody tr"),o=t.find("table thead tr");this.AppendCheckBoxColumnTemplate(i,o,r),HTMLControl.RendererChain(e)},RendererDataChain:function(t,e){var n,a;if(n=t.topDataSetId,a=t.po.listDatasetPageSize,RuntimeGeneralInstance.TryGetUrlParaChangeMainDataSetId()&&(n=RuntimeGeneralInstance.TryGetUrlParaChangeMainDataSetId()),this._CacheRendererDataChainParas||(this._CacheRendererDataChainParas=t,this._Cache$SingleControlElem=t.$singleControlElem.clone()),e){var i=StringUtility.RemoveScript(this._Cache$SingleControlElem.html());t.$singleControlElem.html(i)}else{var r=this._SimpleSearchContainerInstance.BuilderSearchCondition();this._QueryPOList=r}if(t.listRuntimeInstance.IsPreview()){var o={total:1e3,list:[],pageNum:1,pageSize:5,size:5,startRow:1,endRow:5,pages:200,prePage:0,nextPage:2,isFirstPage:!0,isLastPage:!1,hasPreviousPage:!1,hasNextPage:!0,navigatePages:8,navigatepageNums:[1,2,3,4,5,6,7,8],navigateFirstPage:1,navigateLastPage:8,firstPage:1,lastPage:8};this._DataSet=o,this.CreateTable(t.$singleControlElem,o,!0)}else DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{title:"系统提示",hide:{effect:"fade",duration:500}},"数据加载中,请稍候...."),RuntimeGeneralInstance.GetDataSetData({dataSetId:n,pageSize:a,pageNum:this._CurrentPageNum,listQueryPOList:this._QueryPOList,exValue1:"",exValue2:"",exValue3:""},function(e){t.dataSet=e.data,this._DataSet=e.data,this._CheckedRecordArray=[],this.CreateTable(t.$singleControlElem,this._DataSet,!1),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},500)},this)},CreateTable:function(e,t,n){var a=e.find("table"),i=e.find("table tbody tr");e.find("table thead tr");if(0<i.length){for(var r=e.find("table tbody"),o=0;o<t.list.length;o++)r.append(this.RendererSingleRow(a,i,t,t.list[o]));i.remove(),n&&a.find("[singlename='WLDCT_ListTableInnerButtonContainer']").remove()}e.find(".wldct-list-table-inner-wrap").append(this.CreatePaging()),e.find(".wldct-list-table-inner-wrap").width(PageStyleUtility.GetPageWidth()-20),a.addClass("stripe row-border order-column"),a.width("100%");var l=PageStyleUtility.GetPageHeight();l-=110,"none"!=$(".wldct-list-button-outer-wrap").css("display")&&(l=l-$(".wldct-list-button-outer-wrap").height()-12),"none"!=$(".wldct-list-simple-search-outer-wrap").css("display")&&(l=l-$(".wldct-list-simple-search-outer-wrap").height()-10),RuntimeGeneralInstance.TryGetUrlParaViewOnly()&&"操作"==e.find("tr").find("th:last").text()&&(e.find("tr").find("th:last").hide(),e.find("tr").find("td:last").hide());a.DataTable({scrollY:l,scrollX:!0,paging:!1,ordering:!1,searching:!1,info:!1})},AppendCheckBoxColumnTemplate:function(e,t,n){var a=$("<th style='width: 30px'>选择</th>");1<t.length&&a.attr("rowspan",t.length);var i=this._ListRuntimeInstance._ListPO.listDatasetPrimaryKey;$(t[0]).prepend(a),$(n.eq(0)).prepend('<td>\n                                    <div \n                                    columnalign="居中对齐" \n                                    columncaption='+i+' \n                                    columndatatypename="字符串" \n                                    columnname='+i+' \n                                    columntablename="" \n                                    control_category="InputControl" \n                                    custclientrenderermethod="" \n                                    custclientrenderermethodpara="" \n                                    custserverresolvemethod="" \n                                    custserverresolvemethodpara="" \n                                    defaulttext="" \n                                    defaulttype="" \n                                    defaultvalue="" \n                                    desc="" \n                                    id="check_box_template" \n                                    is_jbuild4dc_data="true" \n                                    jbuild4dc_custom="true" \n                                    name="check_box_template" \n                                    placeholder="" \n                                    serialize="true" \n                                    show_remove_button="true" \n                                    singlename="WLDCT_ListTableCheckBox" \n                                    style="" \n                                    targetbuttonid="" \n                                    client_resolve="WLDCT_ListTableCheckBox">\n                                        ID\n                                    </div>\n                                  </td>')},RendererSingleRow:function(e,t,n,a){for(var i=t.clone(),r=i.find("td"),o=0;o<r.length;o++){var l=$(r[o]),s=l.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);if(0<s.length){var d=s.attr("columnname"),u=a[d]?a[d]:"",c=s.attr(HTMLControlAttrs.CLIENT_RESOLVE);WLDCT_ListTableContainer.GetInstance(c).RendererDataChain({$templateTable:e,$templateTableRow:t,$singleControlElem:s,dataSet:n,rowData:a,$cloneRow:i,$td:l,val:u,listRuntimeInstance:this._ListRuntimeInstance})}}return i},CreatePaging:function(e,t,n,a,i,r,o){var l=this,s=$("<div class='table-paging-outer'><div class='table-paging-inner'></div></div>"),d=s.find("div"),u=$("<div class='table-paging-button'>第一页</div>");u.click(function(){l.ChangePageNum(1)});var c=$("<div class='table-paging-button'>上一页</div>");c.click(function(){1<l._CurrentPageNum?l.ChangePageNum(l._CurrentPageNum-1):DialogUtility.AlertText("已经到达第一页!")});var f=$("<div class='table-paging-button'>末页</div>");f.click(function(){l.ChangePageNum(l._DataSet.pages)});var h=$("<div class='table-paging-button'>下一页</div>");h.click(function(){l._CurrentPageNum<l._DataSet.pages?l.ChangePageNum(l._CurrentPageNum+1):DialogUtility.AlertText("已经到达最末页!")});var p=$("<div class='table-paging-info'>总条数【"+l._DataSet.total+"】&nbsp;&nbsp;页数【"+l._CurrentPageNum+"/"+l._DataSet.pages+"】</div>");return d.append(u).append(c).append(h).append(f).append(p),s},ChangePageNum:function(e){this._CurrentPageNum=e,this.RendererDataChain(this._CacheRendererDataChainParas,!0)},TryReloadForListFormButton:function(e){var t=$("#"+e).parentsUntil("[singlename='WLDCT_ListTemplate']").last().parent().find("[singlename='WLDCT_ListTableContainer']"),n=HTMLControl.GetControlInstanceByElem(t);n.RendererDataChain(n._CacheRendererDataChainParas,!0)},SimpleSearchClickEvent:function(e){var t=e.data.listInstance,n=t._SimpleSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=n,t.RendererDataChain(t._CacheRendererDataChainParas,!0)},ShowComplexSearchClickEvent:function(e){var t=e.data.listInstance;DialogUtility.DialogElemObj(t._ComplexSearchContainerInstance._$SingleControlElem,{title:"高级查询",height:410,width:800,modal:!0})},ComplexSearchClickEvent:function(e){console.log("高级查询.");var t=e.data.listInstance,n=t._SimpleSearchContainerInstance.BuilderSearchCondition(),a=t._ComplexSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=a.concat(n),t.RendererDataChain(t._CacheRendererDataChainParas,!0),DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchCloseClickEvent:function(e){var t=e.data.listInstance;DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchClearClickEvent:function(e){e.data.listInstance;DialogUtility.AlertText("未实现!")},GetRecordData:function(e){var t=this._ListRuntimeInstance.GetPrimaryKey();if(this._ListRuntimeInstance.CheckPrimaryKeyInDataSet(this._DataSet,t)){console.log("主键为:"+t);for(var n=0;n<this._DataSet.list.length;n++){var a=this._DataSet.list[n];if(a[t]==e)return a}return DialogUtility.AlertText("找不到主键"+t+"为:"+e+"的记录!"),null}DialogUtility.AlertText("数据集中找不到主键:"+t+",请设置配置是否正确!")},SaveCheckedRowData:function(e){var t=this.GetRecordData(e);null!=t&&this._CheckedRecordArray.push({Id:e,Record:t})},DeleteCheckedRowData:function(e){for(var t=0;t<this._CheckedRecordArray.length;t++)this._CheckedRecordArray[t].Id==e&&ArrayUtility.Delete(this._CheckedRecordArray,t)},GetCheckedRecord:function(){return this._CheckedRecordArray},GetLastCheckedRecord:function(){return 0<this._CheckedRecordArray.length?this._CheckedRecordArray[this._CheckedRecordArray.length-1]:null},ClearAllCheckBox:function(){this._$Elem.find(":checkbox").prop("checked",!1),this._CheckedRecordArray=[]},SetCheckBoxToCheckedStatus:function(e){this._$Elem.find("[row_checkbox_record_id='"+e+"']:checkbox").prop("checked",!0),this.SaveCheckedRowData(e)},__InnerElemGetInstance:function(e){var t=e.parents("[singlename='WLDCT_ListTableContainer']");return HTMLControl.GetControlInstanceByElem(t)}},WLDCT_ListTableInnerButtonContainer={RendererChain:function(e){var t=e.$singleControlElem,n=t.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);t.html(""),t.append(n)},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListTableInnerButtonSingle={RendererChain:function(e){},_ListRuntimeInstance:null,RendererDataChain:function(e){var t=e.$singleControlElem;this._ListRuntimeInstance=e.listRuntimeInstance,t.bind("click",{selfInstance:this,$elem:t,rowData:e.rowData},this.ClickEvent),t.html(""),t.attr("title",t.attr("caption"))},ClickEvent:function(e){var t=e.data.$elem,n=t.attr("targetbuttonid"),a=t.parentsUntil("[singlename='WLDCT_ListTableContainer']").last().parent(),i=HTMLControl.GetControlInstanceByElem(a);i.ClearAllCheckBox();var r=e.data.selfInstance._ListRuntimeInstance.GetPrimaryKey();i.SetCheckBoxToCheckedStatus(e.data.rowData[r]),console.log(n),$("button#"+n).trigger("click"),console.log(i)}},WLDCT_ListTableLabel={_objectType:"Static",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,columnAlign:null,defFormat:null,targetButtonId:null,dictionaryGroupDataSourceId:null,omitLength:null},RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.$singleControlElem,n=e.val,a=t.attr("id"),i=this._propMap[a];i._ListRuntimeInstance=e.listRuntimeInstance;var r=e.$td;if("居中对齐"==i.columnAlign?r.css("textAlign","center"):"左对齐"==i.columnAlign&&r.css("textAlign","left"),"yyyy-MM-dd"==i.defFormat){if(n){var o=DateUtility.ConvertFromString(n);n=DateUtility.Format(o,i.defFormat)}}else if("convertOrganIdToOrganName"==i.defFormat){if(StringUtility.IsNotNullOrEmpty(n)){var l=e.listRuntimeInstance._ListPO.exData.minOrganData[n];if(null!=l&&null!=l)n=l.organName}}else if("convertDDValueToDDText"==i.defFormat&&StringUtility.IsNotNullOrEmpty(n)&&i.dictionaryGroupDataSourceId){var s=i.dictionaryGroupDataSourceId+"_"+n;n=e.listRuntimeInstance._ListPO.exData.minDictionaryData[s].TEXT}if(i.targetButtonId&&(r.addClass("list-td-click-enable"),r.bind("click",{prop:i,rowData:e.rowData},this.ClickEvent)),i.omitLength&&n){var d=parseInt(i.omitLength);0<d&&n.length>d&&(n=n.substring(0,d)+"...")}r.html(n)},ClickEvent:function(e){var t=e.data.prop,n=e.data.rowData,a=t.targetButtonId,i=$(this).parentsUntil("[singlename='WLDCT_ListTableContainer']").last().parent(),r=HTMLControl.GetControlInstanceByElem(i);r.ClearAllCheckBox();var o=t._ListRuntimeInstance.GetPrimaryKey();r.SetCheckBoxToCheckedStatus(n[o]),console.log(a),$("button#"+a).trigger("click"),console.log(r)}},WLDCT_PrintButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("formcode"),t.attr("formid")),i=(t.attr("formmoduleid"),t.attr("formmodulename"),t.attr("formname"),t.attr("id")),r=t.attr("buttonid"),o=(t.attr("innerbuttonjsonstring"),t.attr("opentype"),t.attr("operation")),l=(t.attr("singlename"),t.attr("windowcaption"),t.attr("windowheight")),s=t.attr("windowwidth"),d=(t.attr("client_resolve"),"");if("update"==o||"view"==o){var u=n._ListTableContainerInstance.GetCheckedRecord();if(0==u.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<u.length)return void DialogUtility.AlertText("一次只能操作一条记录!");d=u[0].Id}var c=BaseUtility.GetUrlParaValue("menuRightUrlPara"),f=BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormRuntimePrint.html",{formId:a,buttonId:r,listFormButtonElemId:i,recordId:d,operationType:o,windowWidth:s,windowHeight:l,menuRightUrlPara:c});DialogUtility.OpenNewTabWindow(f)}},WLDCT_Search_DropDownSelect={RendererChain:function(e){},RendererDataChain:function(e){e.$singleControlElem},GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue},WLDCT_Search_TextBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue},WLDCT_Search_TextDateTime={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
