{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack-static.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","registerPlugin","pluginClass","GridStackDDI","ddi","get","remove","el","this","opts","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","batchMode","_prevFloat","saveInitial","commit","_packNodes","_notify","_useEntireRowArea","node","nn","_hasLocked","_moving","_skipDown","y","_fixCollisions","collide","opt","sortNodes","nested","swap","area","x","w","h","skip","didMove","newOpt","pack","moved","locked","moveNode","Utils","copyPos","undefined","skip2","find","n","isIntercepted","collideAll","filter","collideCoverage","o","collides","rect","_rect","r0","r","forEach","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","Math","min","cacheRects","top","right","bottom","left","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","length","copyNodes","autoPosition","addNode","val","dir","sort","_updating","_orig","newY","i","prepareNode","resizing","_id","GridStackEngine","_idSeq","defaults","noResize","noMove","isNaN","nodeBoundFix","before","maxW","maxH","minW","max","minH","_inColumnResize","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","triggerAddEvent","dup","_temporaryRemoved","_removeDOM","floor","box","push","removeNode","removeDOM","triggerEvent","removeAll","_layouts","moveNodeCheck","clonedNode","changedPosConstrain","clone","map","canMove","getRow","c","willItFit","_willFitPos","cleanupNode","content","grid","p","prevPos","needToMove","reduce","row","beginUpdate","endUpdate","save","saveElement","len","layout","list","wl","l","key","layoutsNodesChange","round","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","copy","index","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handle","handleClass","styleInHead","cellHeight","cellHeightThrottle","margin","auto","oneColumnSize","staticGrid","animate","alwaysShowResizeHandle","resizable","autoHide","handles","draggable","scroll","appendTo","disableDrag","disableResize","rtl","removable","removableOptions","accept","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","_gsEventHandler","_extraDragRow","rowAttr","toNumber","getAttribute","anyOpts","minWidth","cloneDeep","toBool","_styleSheetClass","random","toFixed","_initMargin","_widthOrContainer","_prevColumn","getColumn","style","direction","classList","add","parentGridItemEl","closestByClass","gridstackNode","_isNested","subGrid","_isAutoCellHeight","_setStaticClass","engineClass","GridStack","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","parseInt","e","_prepareElement","setAnimation","dragIn","setupDragIn","dragInOptions","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","init","options","elOrString","getGridElement","gridstack","console","error","initAll","selector","grids","getGridElements","addGrid","parent","contains","doc","document","implementation","createHTMLDocument","body","innerHTML","class","children","appendChild","load","registerEngine","_placeholder","placeholderChild","createElement","className","placeholder","addWidget","els","arguments","warn","id","isGridStackWidget","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","_updateContainerHeight","autoColumn","ops","querySelector","_autoColumn","_triggerAddEvent","_triggerChangeEvent","saveContent","saveGridOpt","sub","marginBottom","marginTop","marginRight","marginLeft","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","removeWidget","item","update","getCellHeight","forcePixel","height","offsetHeight","rows","getBoundingClientRect","marginDiff","cellWidth","data","parseHeight","unit","clientWidth","parentElement","window","innerWidth","_triggerRemoveEvent","domNodes","oldColumn","Array","from","matches","destroy","setStatic","parentNode","removeChild","_removeStylesheet","removeAttribute","getFloat","getCellFromPixel","position","useDocRelative","containerPos","documentElement","scrollTop","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","width","rowHeight","makeWidget","getElement","on","name","callback","indexOf","split","noData","event","detail","addEventListener","log","off","removeEventListener","getElements","doAnimate","updateClass","_prepareDragDropByNode","m","keys","k","changed","ddChanged","value","getMargin","elements","_triggerEvent","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","onParentResize","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","movable","disable","enable","enableMove","doEnable","enableResize","_onStartMoving","ui","_dragOrResize","_leave","helper","Engine","f","oldName","newName","rev","wrapper","apply","args","prototype","info","oldAttr","querySelectorAll","getElementById","substring","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","match","Error","parseFloat","target","sources","source","Object","doMinMax","func","delay","isWaiting","setTimeout","removePositioningStyles","getScrollElement","scrollingElement","getComputedStyle","test","overflow","overflowY","updateScrollPosition","distance","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","abs","updateScrollResize","pointerPosY","clientY","scrollBy","behavior","obj","ret","skipFields","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"gridstack-static.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * gridstack-ddi.ts 5.0.0-dev\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","/**\n * gridstack-engine.ts 5.0.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  protected static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.batchMode = true;\n    this._prevFloat = this._float;\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\n    return this.saveInitial(); // since begin update (which is called multiple times) won't do this\n  }\n\n  public commit(): GridStackEngine {\n    if (!this.batchMode) return this;\n    this.batchMode = false;\n    this._float = this._prevFloat;\n    delete this._prevFloat;\n    return this._packNodes()\n      ._notify();\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return collide;\n  }\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.commit();\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this.sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // make sure we are still valid size\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\n    if (!canMove && !o.resizing) {\n      let collide = this.collide(node, o);\n      if (collide && this.swap(node, collide)) {\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    if (o.pack === undefined) o.pack = true;\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      // now check to make sure we actually collided over 50% surface area while dragging\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      // delete internals\n      for (let key in w) { if (key[0] === '_' || w[key] === null || w[key] === undefined ) delete w[key]; }\n      delete w.grid;\n      if (!saveElement) delete w.el;\n      // delete default values (will be re-created on read)\n      if (!w.autoPosition) delete w.autoPosition;\n      if (!w.noResize) delete w.noResize;\n      if (!w.noMove) delete w.noMove;\n      if (!w.locked) delete w.locked;\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.commit();\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/**\r\n * index-static.ts 5.0.0-dev - much smaller, everything you need for a static Grid (non draggable, API driven)\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","/*!\r\n * GridStack 5.0.0-dev\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  oneColumnSize: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(GridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      parentGridItemEl.classList.add('grid-stack-nested');\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      // if column special case it set, remember that flag and set default\r\n      let autoColumn: boolean;\r\n      let ops = node.subGrid as GridStackOptions;\r\n      if (ops.column === 'auto') {\r\n        ops.column = node.w;\r\n        ops.disableOneColumnMode = true; // driven by parent\r\n        autoColumn = true;\r\n      }\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n      if (autoColumn) { node.subGrid._autoColumn = true; }\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.opts._isNested) {\r\n      if (this.opts.column !== this.opts._isNested.w) {\r\n        changedColumn = true;\r\n        this.column(this.opts._isNested.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n}\r\n","/**\r\n * utils.ts 5.0.0-dev\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\n// list of fields we will skip during cloneDeep (nested objects, other internal)\r\nconst skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(829);\n"],"sourceRoot":""}